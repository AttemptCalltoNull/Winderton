И так, ЧТО именно тебе делать мы поняли. Давай посмотрим, КАК это делать, хотя бы в общих чертах.
У тебя есть ~4 часа в день, или 25+ часов в неделю. Это +- оптимальное количество времени которое ты можешь тратить в день, оставаясь при этом продуктивным. Можно и больше, но уже выхлоп будет не такой, как от этих четырех. Старйся делать за это время все самое важное из списков приоритетов, а на "потом" оставлял что-то попроще.

Первое - это общая концепция веба и сам front-end.
Смотри на все с высокой колокольни.
Знакомишься с тем, что такое WEB, как он работает, из чего состоит.
Знакомишься с тем, что такое браузер, какие они бывают, как работают и так далее.
Узнаешь в общих чертах о всяких html, css, js.
Т.е первый месяц занимаешься чисто этим.
Читаешь то, что я тебе скинул, гуглишь то, что не понял + ищешь похожие ресурсы.
120+ часов потратить на этот цикл.

Далее, перетекаешь в сети.(чтобы потом было легче перетечь на серваки)
У меня есть книга по сетям, ты найдешь, и вот в ней ознакомься с теми терминами, которые я тебе перечислил. Это примерно 25-40% всей книги.
- tcp/ip
- dns
- proxy
- udp
- tcp
- http/https
- ssh

По мимо книги смотри на те ресы, которые я привел в главе "Что". Они полезные.
На это потрать пару недель, или около 30ти часов в сумме.

Затем, когда ты разберешься с фундаментом, начинаешь пробегаться по html/css/js более плотно.
Какую именно литерутару читать - ты можешь посмотреть в моем видео о литературе для программистов. Ничего не поменялось особо + ты можешь смотреть таких ребят, как:
- devtips(Жаль что этот челик ушел с youtube, но его канал в руки взял последний)
- mackenzie child
- funfunfunction

Твоя задача сейчас - не замыкаться в зоне комфорта и пытаться осилить Английский до того уровня, чтобы без проблем поглощать Англоязычную речь. Читать, смотреть, слушать в режиме "постоянно" - это единственный способ к этому придти. Пытайся с первых же дней читать все, что ты тут увидишь в оригинале. Спустя пару месяцев такого темпа ты удивишься результату.
Английский - это не самый главный дракон, которого тебе придется победить на этом пути, ты уж мне поверь.

Касаемо тех трех челов.
Это челы, которые на практике показывают как пользоваться css/html/js.
Я уверен, что есть кто-то еще, но эти 3 - это точно проверенный вариант, где можно узнать действительно полезные вещи. Ты до них рано или поздно дойдешь, поэтому просто имей ввиду.
Так же обрати внимание на таких авторов, как: Кроуфорд и Фленеган. И книги и лекции этих людей можешь смотреть без задней мысли. Они знают о чем говорят именно по js.

Так же эта книга: 
- http://speakingjs.com/es5/index.html
Но это больше спецификация, где можно узнать, что и как работает в js.
+
- https://standardjs.com/rules.html
Тут просто можешь посмотреть, что и когда означают те или иные конвенции в js. Может быть полезным.
По поводу html и css - то тут как с Английским. Бери то, что больше нравится и учи. Ошибиться будет сложно. 
Можешь начать с тех книг, о которых я говорил в видео о литературе, а можешь посмотреть какие-нибудь интро, вроде "HTML за час", и не прогадаешь.
Так же по css могу посоветовать этот ресурс. Он такой, знаешь, в слегка интерактивном стиле, и много визуализации. Запоминается хорошо.
- https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Всеми этими тремя технологиями занимаешься около 70-90 дней, по 4+ часа в день. Читаешь, смотришь, пробуешь что-то делать, гуглишь кучу вопросов, ставишь пометки и так далее.
Твоя задача будет просто обо всем этом узнавать и привыкать.
Единственное, что может тебя слегка смутить - то это инструменты, чтобы пользоваться html и css. Различные препроцессоры и фреймворки(bootstrap, bulma, sass, jade и так далее) + у CSS есть так называемые Архитектуры или способы строить css(bem, atomic). Но об этом обо всем ты узнаешь как дойдешь до чего-то +- продвинутого в этой ветке.
Делать можно что угодно, уж где как не во фронт-энде полно идей. Можешь сделать личный блог, свою страничку, страничку своей девушке, написать свою библиотеку с чем угодно и так далее.

Затем, когда ты будешь иметь общее представление, ты можешь пытаться переписывать те же проекты у Mackenzie Child'а. Я помню, года 4 назад, так и делал. Просто писал 10ки разных веб приложений, и пытался разбираться, почему тут так, а тут так. Т.е главное набивать руку + нон стоп гуглить то, что не понимаешь.

Далее, ты переходишь на различные фрейм-ворки(инструмент грубо говоря), вроде node.js, react, angular, vue.
Это все хорошо описано на офф. сайтах + есть ресурсы на том же youtube, где ребята пишут что-то рабочее. Мне рекомендовали чела codeDojo, поэтому можешь присмотреться к нему.(я сам не уверен, но совет дал человек с опытом)
Если коротко, то по факту, все эти фреймвокри - это SPA фреймворки.
Думаю что ты остановишься на vue(я бы тебе рекомендовал, потому что он такой более сбалансированный, без лишнего), но выбор все же за тобой.

На этот момент, ты будешь заниматься только лишь фронт-эндом около 2-3х месяцев, и у тебя руки будут чесаться начать делать что-то свое посерьезнее. Будет куча конфигов, сохраненок всяких с полезными шрифтами, шаблонами и так далее. Это нормально. Ты будешь уже что-то делать.
Касаемо проектов - то тут сложно советовать. Обычно ребята пишут что-то о себе. Какой-то свой сайт. Не знаю.
Твоя задача будет просто постоянно программировать и пользоваться github'ом.(или bitbucket'ом)
Т.е залететь на позицию джуна будет сложно, если у тебя не будет опыта, поэтому полсле изучения теории(первых двух месяцев), начинай активно наполнять свой репозиторий на гитхабе.
Именно вот активно, каждый день. Там просто люди иногда даже репы твои не смотрят, а смотрят на активность пушей, поэтому - да. Это важный момент.

Затем, когда ты разберешься с фронтом, начинаешь пробегаться по выбранной спецификации для бэка.
Какую именно литературу читать - ты можешь посмотреть в моем видео о литературе для программистов + пройтись по библиотеке. Ничего не поменялось особо. Так как я имею коммерческий опыт именно с Java, то в библиотеке ты найдешь большую часть книг именно по этому языку(в контексте веба)
По питону я бы рекомендовал читать Лутца и Эберли.
По JS - Фленеган и Кроуфорд.
Джава - Шилдт.
С++ - Саттер, Прата, Майерс и Александреску.
C# - Рихтер
php, ruby и так далее - что-то от 4х звед на Амазоне. Прогадать будет сложно.

Затем, когда ты будешь иметь общее представление, ты можешь пытаться переписывать те же проекты с reddit. Поток называется r/programming. Там полно всякий идей, вроде переписи команд из shell'а . Я помню так и делал. Просто писал 10ки разных приложений и отдельных модулей этих приложений, и пытался разбираться, почему тут так, а тут так. Т.е главное набивать руку + нон стоп гуглить то, что не понимаешь. Когда будешь переписывать что-то годовалой-двухголовалой давности, то столкнешься с проблемами версий, а именно, что-то нужно будет делать по другому. Ты это будешь искать сам, гуглить, и тем самым получать реальный опыт работы, который будет оценен что работодателем, что тобой.

Далее, ты переходишь на различные фрейм-ворки, отталкиваясь от языка, который выбрал.
Все они достаточно хорошо описаны на офф. сайтах + есть ресурсы на том же youtube, где ребята пишут что-то рабочее, используя эти фреймы. Опять же, кого смотреть, а кого не смотреть - вряд ли получится сказать, но опять же, я бы тебе рекомендовал воздержаться от скрин кастов, и набить себе фундамет на книгах и статьях, классически.
Сейчас я тебе скажу про так называемый тулчейн того или иного языка(технологии), и все что к нему привязано для разработки полноценного бэка.
Фреймворк - это что-то вроде набора готовых модулей(архитектура приложения, куча дефолтных микросервисов, orm, админка, шаблоны, контроллеры и так далее. Т.е просто набор готовых решений, из которых и состоит web приложение)
Тестирование - ну это тестирование, да. Тут даже не знаю что и объяснить. Простыми словами, ты ищешь дыры в своем коде с помощью тестов. Создаешь сложные условия для тех или иных кусков своей программы, и пытаешься найти брешь, которую может найти пользователь.
Пакетный менеджер - это то место, где ты будешь брать себе то, что сам ты не напишешь. Различные сторонние библиотеки и модули, которые полезны в разработке.
___

Python фреймворки - django/flask(это именно дефолтные, синхронные)
Ассинхронные и спецефические(aiohttp, как вариант)
Тестирование в Питоне - (py.test, unittest, pyUnit)
Пакетный менеджер тут только 1, это pip.

Ruby фреймворки - ruby on rails(тут очевидно. не было бы рельсов, небыло бы руби). Еще есть sinatra, но это уже больше лирика.
Тестирование - rSpec.
Пакетный менеджер - rubyGems.

php - фреймворки(laraval, symfony)
тестирование - phpUnit, mockbery
пакетный манагер - composer

node.js - фреймворки(express. там еще есть, но остановись на этом)
тесты - mocha, chai, jest
пакетник - npm

java - фреймворки(spring, grails)
тестирование - что угодно из j2ee стэка.
пакетный манагер - в java за все это отвечает maven.

C# - фрейморк, конечно же, .NET.
тестирование - тоже самое что и с джавой. Стандарты майкросовтовске с .NET.
пакетник - nuget

На этот момент, ты будешь заниматься сферой около 8и-10и месяцев, и свои проекты с фронт-энда, ты будешь натягивать на некоторые технологии выше. Будет опять же куча конфигов, шаблонов, тулзов и так далее. Это нормально. Это будет значить что ты что-то делаешь и не стоишь на месте.
Касаемо проектов - то не просто что-то придумать. Перепиши свой фрейм ворк, свою библиотеку, не знаю. У меня никогда не было таких проблем. Я делал то, что хочу. Хочу понять как работает анимация и жесты? Пишу. Хочу понять какая разница между batch и stream обработкой? Делаю. Хочу понять какая разница между vfx и post fx - делаю. Т.е я тут, потому что я знаю чего хочу.
Твоя задача будет просто постоянно программировать и пользоваться github'ом.(или bitbucket'ом)
На этом моменте ты уже будешь искать всяккие заказы на фрилансе, или же пытаться куда-то устроится(это нормально), и для тебя будет важно иметь github ак с реализациями всяких ls, dir, и cd'ек. + напиши свой библиотеку и свой фреймворк опять же, или свою базу данных, ну и конечно же свой первый сервер, со всяким шмарами и блэкджеком.;3
Пытайся активничать на github'е почти каждый день. Помни что смотрят на на содержание репок, а на активность(не всегда, но часто).

И запомни, прям вот с первых дней начинай все конспектировать. Чтобы ты не изучал - конспектируй. Это работает только так. Да, ты можешь это практиковать по несколько раз, но вот ручка и тетрадь - это сильнейшая комбинация.
Постарайся это делать, и через 3  месяца кропотливого труда, результат тебе понравится, можешь мне поверить.

Так же в то время, спустя месяцев 9-10, после того как ты закрепишься в основах, ты можешь начать тыкать всякие допы(некоторые вещи, которые ты сейчас увидишь, ты начинаешь тыкать раньше):

(Базы Данных)
Где-то после чтения процентов 30-40 любой книги по back-языку, который выберешь, ты переходишь на SQL и теорию баз данных. Об этом есть отдельная графа в книге Intro to Comp Scie + у меня есть книга по базам в библиотеке + там есть папка WEB, в которой есть книга, где резюмировано вообще все из мира той же enterprise разработки. Советую обратить внимание.
Ты должен понять смысл баз данных. Реляционные, не реляционные. СУБД различные. Почем так много баз данных. Это все стандартные вопросы с собеседования, и ты должен знать на них ответ априори.
Книга по базам - Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design (3rd Edition).
(Билд тулзы)
И вот опять же. Никогда не читал ничего по билд системам, кроме оф доков + тонны упоминаний в книгах по software dev'у. В библиотеке они есть.
(Алгоритмы и структуры)
О, да. Самая хайповая тема до сих пор. И не просто так. Дело в том, что если подойти к их изучению здраво, то проблем будет по минимуму. Скажем, если проходить какой-то курс по операционкам, с того же Беркли, или с Гарварда, то там ты узнаешь о многих структурах и алгоритмам на практике.
Чаще же, люди их просто заучивают по тем же книгам Кормана и Сэджвика, для прохождения собеседования или просто для пометки в резюме. И дело в том, что их заучивание тоже работает. Тут все сводится к твоему отношению к сфере. Если ты хочешь развиваться и узнавать что-то новое, то вот почитать Кормана и узнать о том, что такое b trees, и всякие там графы - это будет очень полезно. Ты, скорее всего, вряд ли сможешь сам придти к их использованию на практике, но просто осведомленность - это оружие. Знать о враге, значит быть готовым. Аналогия так себе, но смысл в ней определенно есть.
(Software engineering)
После того, как ты разберешься с языком, узнаешь про базы данных, что-то там поделаешь с гитом, соберешь свой проект в каком-нибудь Maven'е, то ты можешь переходить к чтению всяких там Макконелов. Книга есть у меня в библиотеке.
Еще одна книга, которая так же есть в библе по системному дизайну.
System Architecture: Strategy and Product Development for Complex Systems. Там тоже полно всяких примеров из разработки софта, но Макконел почему-то легче заходит. У него хоть и воды много, но читать зато легко.
Это топ 1 книга на столе у каждого дева в EA, например. Инфа соточка :3
(Design Patterns)
Ну и паттерны, конечно же. Тут есть 2 книги. Одна из серии для недалеких, head first, а другая - GoF.
Их обе оч хвалят, но я тебе советую читать только вторую. Она написана профессионалами, и там ребята четко знают, что C++/Java/C# - это тру языки для ООП и реализации многих шаблонов.

Смотри, тут нет никакой панацеи или сильвер булета. Этим всем можно заниматься как 2 часа в день, так и 10. Все упрется лишь в твое желание, и время, за которое ты станешь хотя бы Джуном, по меркам рынка.
Приоритеты:
- Java/С#/python(спецификации)
- Базы(sql, mysql, реляционные/нереляционные)
- Основы software dev(networking, git, build systms, web servers, frameworks, restfull, docker и тд)
- Теория: Алгоритмы, структуры, паттерны, 

пасхалка:
вот тебе пару идеек для практики
- http://codeloveandboards.com/blog/2016/01/04/trello-tribute-with-phoenix-and-react-pt-1/(создание trello)
- https://hackhands.com/building-instagram-clone-angularjs-satellizer-nodejs-mongodb/(создание instagram)
- https://scotch.io/tutorials/building-a-real-time-markdown-viewer(немного node.js)
- https://javascript30.com/(выбери тут парочку проектов для себя)

_____


В итоге:
~4 часа в день. Сделай все, чтобы каждый день принес в твою жизнь как программиста что-то полезное. Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно получают. Они находят пути. Так было всегда и так будет. Это наша природа. Природа людей. Старайся изучать все в том ритме, о котором я тебе посоветовал. Можешь по возможности корректировать все в зависимости от желаний, но старайся придерживаться плана.
Основы платформы=>front-end=>back-end=>libs/frameworks/tools=>other

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь, даже если будешь сильно активничать. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится(кладется?) поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации или какому-то упрощению. Чем больше ты знаешь, тем лучше твой код. Все просто. Каждый раз как ты будешь что-то писать, ты будешь писать это по другому, по мере изучения всего этого.
Занимаясь по 4+ часа день, и год ты потратишь на себя около 1к+ часов. С этим багажем можно будет пробовать залетать по крайней мере во всякие t3-t2 конторы в качестве full-stack developer'а.


