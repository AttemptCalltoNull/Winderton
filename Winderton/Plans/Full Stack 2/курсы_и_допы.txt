WEB - это крайне раздутая и хайпанутая ветка, в которой многие уже успели поживиться, а многие продолжают это делать. Я хочу сказать то, что тут просто уйма курсов, где тебя могут "научить" чему-то принципиально новому. Изучение основ, изучение топовых фрейворков, изучение инструментов и так далее. Более того, эти ребята пошли дальше, и организовали целые платформы по "подготовке" людей как фронт-энд инженеров так и back-end, да чего уж там, full stack разрабов. Мнение не мое, но я целиком с ним согласен, и звучит оно следующим образом, "Все эти курсы - это дерьмище, где максимум, что ты узнаешь, это как сделать выпадающее меню, или стандартный spa с примитивным, без возможности масштабировать бэком, делать который можно научиться на первых страницах офф. доков". Смысл этих площадок, "udemy, pluralsight, edx, open2study, treehouse, codeacademy, geekbrains, javarush и так далее в том, чтобы заработать денег, а не выпускать качественных инженеров." Я хочу сказать то, что я не могу тебе порекомендовать никаких курсов, и ограничу тебя лишь книгами, статьями и гуглом. 
Не смотря на все это, у меня все же есть для тебя парочка курсов, один из которых предлагает сам MIT. Они узкоспециализированны, да, но там ты узнаешь явно больше, чем из любого курса, который ты можешь купить на сети.
Я, как и мои источники, а мне помогали делать этот гайд люди из Майкрософта и Ориджина(Electronic Arts), не советую тебе смотреть различные курсы, а советую тебе остановиться на том, что есть в этом плане + воспользоваться гуглом и иногда ютюбом. 
Умение искать нужную информацию - это ценный навык, поэтому - да, у тебя сейчас есть все необходимое + последовательность. Ты можешь гуглить то, что ты не сможешь понять с помощью "моих" ресурсов, но я думаю ты справишься и не свернешь с пути.

1. Курс по веб-деву в принципе. Не смотри на то, что он старый. Там достаточно много фундаментальных основ, которые все еще актуальны и будут актуальными.
2. общий курс по software dev'у. Один из лучших на сети.

_______

Допы.

Различные полезные ресурсы, где можно и стоит искать ответы на вопросы.

http://www.programmerinterview.com/
https://lwn.net/Articles/250967/
https://www.dualshockers.com/naughty-dog-explains-ps4s-cpu-memory-and-more-in-detail-and-how-they-can-make-them-run-really-fast/
https://fgiesen.wordpress.com/2011/07/09/a-trip-through-the-graphics-pipeline-2011-index/
https://cellperformance.beyond3d.com/articles/
https://techdifferences.com/
Первая ссылка - оч крутой сайт, где кратко рассказывается про все технологии, и что спрашивают на собеседованиях. Многим сейчас актуальна, но не смотря на то, что этот сайт типа готовит к собеседованиям, его можно использовать как овервью того, о чем хочешь узнать.
Вторая - все, что нужно знать об оперативной памяти программисту.
Вообще, касаемо второй ссылки - это мягко сказано. Это одна из лучших статей в интернете на тему общей программной инженерии вообще. Ее тебе посоветуют просто везде. Там не только память, там затронуты многие секторы компьютерной архитектуры и практик программирования. Поэтому, обязательно поверь.
Третья - это чел с Naughty dog объясняет за процессор, память и всякие интересные фишки из программирования. Советую тоже чекнуть.
Четвертая - все о том, как работают GPU.("Всё" - это само собой громко сказано. Там рассказаны общие вещи о том, что нужно знать, чтобы программировать с использованием GPU)
Пятая. Сайт Майка Эктона, где он рассказывает оч много полезного про программирование, и в частности о лоу-левеле. Не обрщай внимание на то, что это CELL. Эти знания применимы и к x64.
Так же несколько сайтов, где можно найти полезную инфу.
Шестая - сайт типа первого. Т.е там много рассказывается о базовых понятиях. Можно почитывать как квору или редит.


stackexchange.com
Это ресурс, где есть куча ветвей на любой вкус.
Одна из них - stackoverflow.com. Самое популярное место среди программистов. Туда ты будешь ходить с разными вопросами, и тебе их там помогут решить.
Так же тут есть другие ветви, например, тот же самый cs50. Т.е то место, где решают вопросы с этого курса.
Так же там, т.е на stackoverflow, можно найти самые популярные вопросы по той или иной технологии, например, топ вопросов по Java, и, так сказать, избавить себя от граблей, на которые ты рано или поздно бы наступил. Оч удобно.

quora.com
Место, где просто можно найти много полезного по программированию и не только. Там постоянно задают прикольные вопросы, поэтому - проверяй. Ну а вообще, многие относятся к кворе как к фейсбуку, т.е она отвлекает, и там спокойно можно сидеть часами. Имей это ввиду.

reddit.com
Ну тут очевидно. Топ 1 сайт, от куда все копируют инфу на всякие хабрахабры и тостеры.
Находишь любой интересующий тебя reddit, или поток, например "Программирование", сортируешь все по рейтингу(или как хочешь), и смотришь лучшие вопросы за все время существования этого сайта. Тот же принцип как и со stackoverflow. Можно узнать кучу полезного и сэкономить время.

http://context.reverso.net
офигенный словарь, где можно найти реально полезные примеры

https://www.multitran.ru/
Еще один словарь, но первый мне нравится больше.


Command Line
https://guide.bash.academy/
https://commandlinepoweruser.com/


_______

3D additionals

https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-ray-tracing/how-does-it-work
https://github.com/ssloy/tinyrenderer/wiki
https://lodev.org/cgtutor/raycasting.html
http://www.pbr-book.org/
https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/overview-rasterization-algorithm
https://avikdas.com/build-your-own-raytracer/
https://www.davrous.com/2013/06/13/tutorial-series-learning-how-to-write-a-3d-soft-engine-from-scratch-in-c-typescript-or-javascript/
http://blog.rogach.org/2015/08/how-to-create-your-own-simple-3d-render.html
http://www.gabrielgambetta.com/computer-graphics-from-scratch/introduction.html
http://aosabook.org/en/500L/a-3d-modeller.html


## Check Items: 

### Курсы
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-171-software-engineering-for-web-applications-fall-2003/
http://www.infocobuild.com/education/audio-video-courses/computer-science/cs169-berkeley.html

