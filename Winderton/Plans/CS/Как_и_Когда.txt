Итак. Ты знаешь чем тебе заниматься. Давай теперь решим, КАК этим заниматься.
У тебя есть ~5 часов в день, т.е  ~30 часов в неделю.  Это достаточное количество времени, но и его можно бездарно просрать, поэтому мы сделаем следующим образом.
1. Первый месяц просто знакомишься со сферой, поэтому читай те три книги в свободном темпе. Ко всему этому у тебя должен быть интерес, ведь ты же занимаешься этим не спроста. Так что, этот месяц будет твоей стартовой точкой. Не пытайся резать углы или искать халяву, путем пропуска тех или иных глав. Нет. Двигайся размеренно. Если что-то не понимаешь, то пытайся с этим разбираться. Но не забывай про правило получаса. Если ты не можешь решить какую-то проблему пол часа подряд, то двигайся дальше, а к этой проблеме вернись в свободное время.
2. Затем, следующие 2 месяца занимаешься и изучаешь только платформу. (Курс + книги + что угодно другое).
Инглиш у тебя страдает, как мы поняли, поэтому сразу возникает проблема. Курсы + библиотека, все на Английском, т.е мы будем ограничиваться только книгами + стараться выводить уровень языка на то, чтобы эти курсы в конечном итоге посмотреть. Каждый день, прям вот запомни, каждый день, с первого дня пытайся читать что-то из того, что я тебе порекомендовал и еще порекомендую читать. Алгоритм следующий: Начал, посидел минут 10, ничего не понял? Гугли слова которые не понял, выписывай их, и пробуй заново. Следующий день тоже самое. Делай так в течении 2-х+ месяцев, пока не будет такого, что ты с горем пополам читаешь книги, и не замечаешь того, как листаешь страницу за страницей. Так как курс ты пока смотреть не можешь, ты читаешь(пытаешься) книги. Книга pattа и pattelа будет отличной альтернативой курсу, который я тебе порекомендую в Курсах. Там ты будешь сталкиваться с топиками, которые ты не поймешь с первого раза. Скажем, транзисторы всех в шок вгоняют, и люди тратят на их разбор уйму времени. Нет, не так. Просто знакомишься с темой, разбираешь ее так, как ее советуют разбирать, и двигаешь дальше. Если чувствуешь что не понимаешь, стоит дайвить или нет, то лучше спроси у меня, либо же двигай дальше, а транзисторы или что-то другое гугли в свободное время. И так делай со всеми непонятными вещами. Т.е у тебя не должно быть такого, что ты сидишь над темой больше, чем над ней нужно сидеть. Это нужно чувствовать.
О курсе так узнаешь в "курсах".
3. Операционные системы. Еще 2 месяца занимаешься осями на столько плотно, на сколько сможешь.(Курс + книга)
Суть тут в том, что ОСки - это, наверное, самый сложный софт с точки зрения архитектуры и идеи, и тут даже сложно сказать, "Вот это учи, вот это не учи." Автор при написании книги сам решает, что добавлять в книгу, а что - нет, поэтому выбор книги тут очень важен. Я читал более 3х книг по операционным системам, и нашел, на мой взгляд лучшую, где скомбинированы многие важные составляющие: подача, понятные примеры, объем материала и так далее.
Там есть все, что работает на практике. А так же, касаемо курсов, то плюсом к этой книге будет курс из Беркли. Там, правда, советуют книгу с динозаврами(ее так и называют), но она мне не понравилась. Как будь-то на "отвали" советуют, я не уверен. Та книга норм, если сравнивать ее с ничем, но если есть альтертативы, то лучше взять их.
Так же есть курс из Гарварда, где тоже советуют книгу с динозаврами. Может быть это какая-то договоренность?
Но и в том и в том курсе есть свои плюсы в подходах. Я проходил их оба, неоднократно. Тот что с Беркли - мне нравится больше, из-за подачи автора. Кьюбатовиц - он такой, тип, выглядит даже как программист из 70ых плюс у него очень развита харизма. Его просто слушать даже приятно.
Но опять же, ты вряд ли даже через пол года сможешь смотреть эти курсы и все понимать. Мы будем первое время заменять все только книгами.
О курсе так же в "курсах".
4. Спустя где-то пол года, если ты будешь придерживаться плана, ты узнаешь о многих фундаментальных вещах.. У тебя "Пазл" начнет собираться воедино. Ты увидишь тонны примеров кода во время прохождения этих курсов. Ты ознакомишься с базовыми понятиями программирования. Со всеми основными моментами. И уже после того, как ты узнаешь о чем я сейчас говорю, ты можешь без проблем пикать любую книгу со спецификацией языка(тебе уже не нужно будет искать книги как таковые), тебе хватит только официальных доков, потому что у тебя будет понимание, которого нет у многих из-за кривого подхода к обучению, и просто ее читать. Ты, имея тот самый необходимый фундамент, будешь без проблем изучать практически любой язык программирования, и ты будешь по оглавлениям любой книги ориентироваться как рыба в воде. Ты уже будешь знать, что есть в языках программирования, что можно с ними делать, как они примерно работают, и так далее. Например, если тебе нужно будет добавить параллельность в свою программу(ты уже будешь знать, что можно делать программы, которые могут исполняться в нескольких потоках, то ты уже знаешь, какие для этого есть инструкции в, скажем, x86(ARM, Cell, IA32 и тд), и ты уже просто смотришь, какая имплементация этих инструкций в том или ином языке. У тебя будут появляться претензии к разным языкам, вроде, "Противный синтаксис в целом, уродливая объектная модель, та же самая многоптоточность реализована убого, или работа с сетью хромает и так далее" - это нормально. Ты уже будешь относиться к языкам как к разным инструментам, и к реализациям амбиций всяких там Страуструпов, Далов и тд.

Важно. Сразу, с первых же дней, вводи себе в привычку все конспектировать. Просто приучи себя записывать все самое важное из того, что ты видишь и слышишь. Не бойся спрашивать себя. Задавать себе вопросы касаемо той темы, которую ты разбираешь. Если ты изучаешь что-то, и у тебя есть недопонимание любого рода, дави себя, пока не разберешься. Деть, два, три. Сколько потребуется. У меня такое было в свое время со статиком и с пониманием динамического полиморфизма. Когда еще не было опыта достаточно, и я никак не мог понять, что это за модификатор, а объяснение, "Вы можете обращаться к методам с этим модификатором без создания эклемпляра" - меня не устраивало, и я копал настолько низко, пока не разобрался с памятью в принципе и не узнал про то, что для статических данных есть отдельный блок памяти в экзешнике, и для констант он тоже есть, и для инициализированных и не инициализированных данных и так далее. Когда я увидел статик в С++, и то, что он там означает раз в 5 больше, чем в java - меня повергло в шок, но тот факт, что я разобрался с тем, как он работает до этого, я понял статик плюсов буквально моментально.

Касаемо твоего Английского. Ты, скорее всего, себя уже пару раз спросил, а где же пункт по изучению языка. Дело в том, что изучение Английского должно у тебя быть как прием пищи. Ты должен заниматься им буквально постоянно. Что-то читать, пробовать смотреть, окружать себя языком и так далее. Можешь пойти к репетитору, можешь просто смотреть все подряд на том же ютюбе, можешь подписаться на 100+ пабликов в вк, и просто часами крутить ленту, пытаясь что-то запоминать и выписывать. Можешь прислушаться к тому, как я с языком справился, и делать все точно так же. Старайся втиснуть Английский в свой ежедневник, и выделить ему хотя бы пол часа в день в сумме, а в идеале больше.

В итоге:
~5 часов в день. Тебе нужно воспользоваться каждым днем с умом. Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно получают. Они находят пути. Так было всегда и так будет. Это наша природа. Старайся изучать все в том ритме, о котором я тебе посоветовал. Можешь по возможности корректировать все в зависимости от желаний, но старайся придерживаться абстракций и их порядка.
- Железо>Оси>Теория языков>хай левел проектирование.

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации. Чем больше ты знаешь, тем лучше твой код. Все просто. И да, твой код...ты будешь писать его по другому каждый раз, по мере изучения того, о чем мы тут говорили.
Наша задача, хотя бы обо всем этом узнать поверхностно, потому что сам понимаешь, за год стать человеком, который идет в intel и решает их проблемы на уровне core technologies - это очень сложно. Там ребята десятилетиями работают и все еще испытывают сложности. Не бойся того, что я говорю, "Узнать обо всем поверхностно". Поверь мне, ты будешь очень глубоко копать временами.
В общем и целом, если ты в течении года будешь заниматься всем тем, о чем мы говорили, то ты потратишь около 1.5k часов на сферу. Год изучения основ по 5 часов в день - это уже претензия. Ты дальше уже без нужды в каком-либо плане будешь ориентироваться что тебе делать далее и чего ты хочешь. И да, этот год обучения может быть самым продуктивным в твоей учебе как программиста в принципе.