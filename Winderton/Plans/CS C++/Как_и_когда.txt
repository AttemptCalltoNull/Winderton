Сейчас ты узнаешь о самом алгоритме действий.
То, о чем мы поговорили в главе "что", это так или иначе мотивация делать то, что ты собираешься делать. Там есть немного воды, немного конкретики, драмы и комедии. Я никогда не учился писать книги или что-то другое, кроме кода, поэтому все то, что ты видишь сейчас - это импровизация и мое виденье того, как должен выглядеть рассказ.
Во первых, у тебя есть около 3х часов в день в среднем. Если иногда будет какой-то доп или экстра время в виде часа или двух, это просто отлично.
Вообще, 3 часа - это не так мало, как может показаться. Да, люди занимаются и по 8 часов в день, но смысл в том, что ты не можешь быть 100% мотивирован заниматься чем-то 8 часов в день(есть случаи, но это частные, а мы же говорим об общих). Ты устаешь, тебе становится скучно, нудно и так далее. Соответственно, твои 3 часа можно использовать максимально продуктивно.
Далее, у нас есть 2 подхода к тому, как ты будешь учиться:
Первый и более понятный всем - это университетский стиль. Каждый день, всего понемногу.
Второй - изучение каждого топика на достаточном уровне, перед тем как переходить к следующему.
У каждого из этих подходов есть свои плюсы и минусы.
В случае первого, ты узнаешь обо всем по чуть-чуть, и у тебя начинают раньше появляться вопросы, на которые ты периодически не будешь знать где искать ответы. Это может свести с ума, но ты быстрее будешь узнавать обо всем.
В случае же второго варианта, ты идешь по сфере равномерно. Сначала учишь один уровень абстракций, далее второй а затем третий. Вопросы появляются менее хаотично и растешь ты более сбалансировано. Но тут минус такой, что тебе становится скучно заниматься чем-то одним и ты начинаешь прыгать либо по главам, либо на другие топики. Это все получается неравномерно, и ты загоняешь себя в ту самую яму, где у тя куча вопросов, ты тонешь в инфе, и единственный способ это исправить, начать все сначала.
Итак, неважно что ты выберешь, ты +- за одно и тоже время придешь из точки А в точку Б, поэтому решай сам.

_______


Если выберешь первый вариант:

1. Первый месяц все просто. Ты знакомишься с Computer Science и всеми ее составляющими. У тебя есть 3 книги для этого, и как ты уже знаешь, читать их можешь в любом порядке. У тебя должны начать копиться вопросы во время их изучения, это нормально. Ответы ты на них найдешь в следующих "главах".
Тут важный момент - не пытаться резать углы и халявить. Т.е тебе буквально нужно постараться узнать обо всем по чуть-чуть, или получить представление в формате, "понимаю общую картину."
Читаешь книги, гуглишь то, что в книгах на твой взгляд написано непонятно и в общем и целом, пытаешься перейти "на ты" со сферой.
Этим всем ты занимаешься около одного месяца в первом и втором подходе. У тебя должно в итоге получиться около 70-80ти часов, чего будет достаточно, чтобы переходить к конкретике.

2. Следующие 3 месяца занимаешься в таком ритме:
- Два часа железяки(Курс, книги, статьи, доп ресурсы и так далее)
- Час операционные системы.

За эти 3 месяца у тебя уйдет на эти 2 топика около 220+ часов.
За это время тебе нужно будет узнать о следующих их составляющих:
Железки:
- Концепция памяти(гейты, регистры, ram, persistent)
- state, finite state machine
- Von neumann model vs harvard model(тут узнать про организацию памяти, про ISA, I/O, instruction cycle)
- ISA(что это, зачем, какие виды)
- Assembly(что это. виды исполняемых файлов, виды асмов, компоновщики и тд)
- I/O(это один из самых важных подтопиков)

Параллельно со всем этим изучаешь операционные системы
- Пытаешься понять различные уровни операционок
- как они связаны с железом, как им управляют
- что такое kernel(что такое user), виды kernel'ов
- понятие процесса(из чего состоит, что это(
- как управлять процессами, виды механизмов управления процессами в разных операционках
- память. управление памятью
- вся организация памяти(сегментация, paging, адресные пространства)
- Про кэш ты узнаешь из железок, но тут уже будет момент того, как с ним работать с программного уровня
- многопоточность, канкаренси в общем и тд
- что такое поток как идея, что можно с ними делать а что нельзя
- синхронизация, дед локи и тому подобное
- kernel level потоки, user level потоки

Это самые основные топики, на которые тебе стоит делать упор, занимаясь по 3 часа в день.
За 3 месяца ты ознакомишься с +- всем, что я тебе тут описал.
В главе "курсы", ты найдешь ряд курсов, по изучению и железа и операционок + так же все книги, которые для этого нужны. Так же, в доп ресурсах, найдешь какие-то пасхалки, где можно узнать про те или иные части того, о чем ты и так будешь знать. 

3. Затем, спустя 4 месяца, плюс минус, если ты будешь придерживаться плана, ты переходишь на уровень выше, а именно к теории дизайна языков программирования.
Т.е ты миксуешь изучение операционок с изучением самого программирования. На тот момент ты будешь достаточно осведомлен о лоу-левеле(платформе, железе, ЭВМ), и работать больше будешь на уровне операционных систем, нежели hardware'а, поэтому свои 3 часа+ ты тратишь на оски и само программирование.
Пока ты учишься эти 4 месяца, ты и про алгоритмы узнаешь, и про структуризацию данных, и про всякие там понятия API, библиотеки, фреймворки и тому подобное. Успеешь по программировать на языках компилируемых, интерпретируемых, на языках с байткодом.
Но на этом этапе, ты начинаешь изучать программирование явно,
Час-полтора - операционки
Час-полтора - программирование и теорию дизайна языков
По компиляторам есть популярная книга, Dragon book, но она сложная, поэтому я бы ограничился курсом по компиляторам со стенфорда + книгами по x86 assembly.
В них достаточно информации, чтобы понять идею программирования, перед тем как переходить к изучению какой-нибудь java или C++.
Тут тебе стоит разобраться:
- c идеей компиляторов и интерпретаторов.
- c идей виртуальных машин
- что есть assembly и его виды + как он работает с ISA
- тулченйны языков(компилятор, компоновщик, интерпретатор, препроцессор, дебагер, профайлер, дизассемблер)
- теория типов данных
- переменные, функции, массивы, указатели, операторы, структуризация данных. Это все примитив, но он будет иметь смысл на этом моменте.
Спустя где-то пол года(6-7 месяцев), у тебя будет хоть какой-то бэк

4. И далее, свои 3 часа ты тратишь на более серьезные вещи, но занимаешься все по тому же принципу.
Только по железякам ты тыкаешь Танненбаума или Хеннеси + интеловкие мануалы x86/64.
По операционкам читаешь MSDN или unix like ресурсы, по работа с API оски.
По плюсам штудируешь Страуструпа или Прату, не суть. У меня есть в либе и iso стандарт. Если потянешь его, то будет совсем замечательно. Это скилл, уметь читать доки.
Так же почитываешь челов вроде Александреску и Саттера. Саттер отлично пишет про канкарренси, а Александреску больше говорит о том, что делать не надо в С++, нежели надо.

Если же ты выберешь второй путь развития, или более основательный, то двигаться ты будешь следующим образом.

1. Ну первый месяц тоже самое, как и в первым вариантом.

2. Затем, последующие 2 месяца мы знакомимся с платформой по ближе.(ты уже будешь иметь общее представление о ней)
Для изучения железок есть несколько курсов на сети. Я в данный момент сужу только по себе, учти это, но на мой взгляд есть вообще только один грамотный курс, где рассказывают о платформе настолько подробно и понятно, что вопросов возникает просто по минимум. Об этом курсе ты узнаешь в "курсах", позже.
Там идет прогон по всему, не только железу. Автор рассказывает как буквально работают компьютеры и что нужно, чтобы сделать свой.
Так же, как раз таки на этом курсе и советуют книгу pata и pattela. Она не обязательна, но почитать можно. Если читать ее внимательно, то можно уследить как автор курса "позаимствовал" ряд объяснений и примеров именно из этой книги. В общем и целом - можешь относиться к этим материалам как к чему-то абсолютному, но не брезгуй и альтернативами. Я уже перестал следить за ютюбом и реддитом в этом плане, потому что для меня это пройденная тема, но есть вероятность того, что может в любой момент появиться годная альтернатива. Имей это ввиду.

3. Операционные системы. 4-5ый месяц занимаешься осями. О них ты тоже узнаешь в из курса с Карнеги Мелона + неоднократно будешь слышать в тех трех книгах, которые ознакомят тебя со сферой.
Суть тут в том, что ОСки - это, наверное, самый сложный софт с точки зрения архитектуры и идеи, и тут даже сложно сказать, "Вот это учи, вот это не учи." Автор при написании книги сам решает, что добавлять в книгу, а что - нет, поэтому выбор книги тут очень важен. Я читал более 3х книг по операционным системам, и нашел, на мой взгляд лучшую, где скомбинированы многие важные составляющие: подача, понятные примеры, объем материала и так далее.
Там есть все, что реально работает на практике. А так же, касаемо курсов, то плюсом к этой книге будет курс из Беркли. Там, правда, советуют книгу с динозаврами(ее так и называют), но она мне не понравилась. Как будь-то на "отвали" советуют, я не уверен.
Так же есть курс из Гарварда, где тоже советуют книгу с динозаврами.
В обоих курсах есть своя куча плюсов. Я проходил их оба, неоднократно(мне просто приятно смотреть что-то качественное. Это как фильм). Скажем, тот что с Беркли - мне нравится больше, из-за подачи автора, по большей степени. Ему фамилия Кьюбатовиц, и он очень харизматичный. Материал заходит на ура, и хочется пересматривать. Я не шучу.
О курсе так же в "курсах".
4. Спустя где-то пол года, если ты будешь придерживаться плана, ты узнаешь о многих фундаментальных вещах. У тебя "Пазл" начнет собираться воедино. Где-то все же будут пробелы, это норма, но латать их будет легче, из-за того что у тебя будет выстраиваться какое-то общее понимание и видение проблемы. Ты увидишь много примеров с кодом. Какие-то понятные, какие-то нет. Но факт в том, что ты увидишь примеры кода на реальных проектах. Действительно элегантный код. Код, который "придумали" ребята, кто был задействован в разработке тех же операционных систем. Ты ознакомишься со многими базовыми понятиями программирования. Со всеми основными моментами. И уже после того, как ты узнаешь о чем я сейчас пытаюсь тут тебе сказать, ты можешь без проблем пикать любую книгу со спецификацией языка(тебе уже не нужно будет искать книги как таковые), тебе хватит только официальных доков, потому что у тебя будет понимание, которого нет у многих из-кривого подхода к обучению, и просто ее читать. Точнее читать какие-то конкретные главы, потому что часть спецификации ты будешь знать. Ты, имея тот самый необходимый фундамент, будешь без проблем изучать практически любой язык программирования, и будешь по оглавлениям любой книги ориентироваться как рыба в воде. Ты уже будешь иметь представление, что есть в языках программирования, что можно с ними делать, как они примерно работают и так далее. Например, если тебе нужно будет добавить параллельность в свою программу(ты уже будешь знать, что можно делать программы, которые могут исполняться в нескольких потоках), то ты уже знаешь, что для этого есть определенный сет инструкций, скажем, в x86(ARM, Cell, IA32 и тд), и ты уже просто смотришь, какая имплементация этих инструкций присутствует том или ином языке. У тебя будут появляться претензии к разным языкам, вроде, "Типы данных странные, скудная стандартная либа, приведение типов реализовано через "медленные" инструкции, блок управления многопоточностью странный, и так далее " - это нормально. Ты уже будешь относиться к языкам как к разным инструментам, и к реализациям амбиций всяких там Страуструпов и Далов.


Важно. Прям "с ходу" начинай все конспектировать. Это очень важный момент. Не ленись. Просто приучи себя записывать все самое важное из того, что ты видишь и слышишь. "Самое важное" можешь записывать вообще все подряд. Плохо никому не будет. Так же, не бойся спрашивать себя. Задавать себе вопросы касаемо той темы, над которой ты работаешь. Если ты изучаешь что-то, и у тебя есть недопонимание любого рода, дави себя, пока не разберешься. День, два, три. Сколько потребуется. У меня такое было в свое время со статиком и с пониманием динамического полиморфизма. Когда еще не было опыта достаточно, и я никак не мог понять, что это за модификатор, а объяснение, "Вы можете обращаться к методам с этим модификатором без создания эклемпляра" - меня не устраивало вообще. Я будь-то чувствовал, что тут что-то не то, и я копал настолько низко, пока не разобрался с памятью в принципе и не узнал про то, что для статических данных есть отдельный блок памяти в экзешнике, и для констант он тоже есть, и для инициализированных и не инициализированных данных и так далее. Когда я увидел статик в С++, и то, что он там означает раз в 5 больше, чем в java - меня повергло в шок, но тот факт, что я разобрался с тем, как он работает до этого, я понял статик плюсов буквально моментально. Тоже самое было и с ран-тайм полиморфизмом, и со многими другими вещами

В итоге:
3 часа в день. Сделай все, чтобы каждый день принес в твою жизнь как программиста что-то полезное. Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно это получают. Они находят пути. Так было всегда и так будет. Это наша природа. Природа людей. Старайся изучать все в одном из тех ритмов, о которых я тебе сказал. Можешь по возможности корректировать все в зависимости от желаний.

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь, даже если будешь сильно активничать. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится(кладется?) поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации. Чем больше ты знаешь, тем лучше твой код. Все просто. Каждый раз как ты будешь что-то писать, ты будешь писать это по другому, по мере изучения всего этого.
Наша задача, хотя бы обо всем этом узнать поверхностно, потому что сам понимаешь, за год стать человеком, который идет в nvidia и решает их проблемы на уровне core технологий - это сложно. Там ребята десятилетиями работают и все еще сталкиваются с огромным количеством сложностей. Не бойся того, что я говорю, "Узнать обо всем поверхностно". Поверь мне, ты будешь очень глубоко копать временами.
В общем и целом, если ты в течении года будешь заниматься всем тем, о чем мы говорили, то ты потратишь около 900+ часов на сферу. Тебе дальше, уже не будет нужен никакой план. Ты получишь то самое понимание, которая я стараюсь тебе дать, и там пойдет как по "накатанной".