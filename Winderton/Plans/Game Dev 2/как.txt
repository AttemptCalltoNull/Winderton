Что тебе делать мы поняли. Теперь переходим к тому, КАК все это делать.
У тебя, условно, есть ~6+ часов в день, т.е ~35-40 часов в неделю. Это много, скрывать это я не буду.  Но и это время можно бездарно просрать, поэтому отнесемся максимально серьезно к каждому часу на дню.
Делаем следующим образом:
1. Тут все просто. Знакомишься с фундаментом. Пытаешься расширить свой кругозор и понимание того, что есть а чего - нет. Те 3 книги дадут тебе эти знания наверняка. На этом этапе не пытайся резать углы. Читай все равномерно, копи вопросы, интересуйся, дискутируй. Это твой старт, и он должен быть правильным. На эти 3 книги потрать полноценный месяц, т.е ~150 часов.
2. Курс из Карнеги(если не способен смотреть пока, то читать pat & pattel) + читай Танненбума + пытайся осилить Интеловский мануал для x64(он будет в либе). К мануалу переходи после того, как ты будешь комфортно чувствовать себя с Эндрю + не относись к мануалу так, как будь-то это книга. Он большой, и его нужно проверять просто периодически, потому там полно полезной инфы по тому, как вообще стоить программировать x86-64 совместимые процессоры.
Так же, по мимо CPU, пытайся тыкать и GPU(rendering pipeline, shaders и тк далее). Ты в допах увидишь ту саму ссылку на то, где описан весь gpu pipeline как следует + книга с opengl из библиотеки, хоть и не самой новой версии, даст тебе наглядное понимание про спецификации графические. Ты должен ознакомиться аппаратным уровнем хотя бы фундаментально.
На эти потрать следующие 2 месяца, или 300+ часов.
3. Операционные системы. Начинай ими заниматься, как закончишь Карнеги(или patt + Таненбаум). Это очень важный софт для тебя. Ты должен знать, где нельзя избежать его помощи, а где можно халявить и общаться напрямую с железками(именно вот за этот навык тебя будут рвать с руками на рынке те, кто понимает в чем тут дело).
Суть тут в том, что ОСки - это, наверное, самый сложный софт с точки зрения архитектуры и идеи, и тут даже сложно сказать, "Вот это учи, вот это не учи." Автор при написании книги сам решает, что добавлять в книгу, а что - нет, поэтому выбор книги тут очень важен. Я читал более 3х книг по операционным системам, и нашел, на мой взгляд лучшую, где скомбинированы многие важные составляющие: подача, понятные примеры, объем материала и так далее.
Там есть все, что реально работает на практике. А так же, касаемо курсов, то плюсом к этой книге будет курс из Беркли или с Гарварда. Там, правда, советуют книгу с динозаврами(ее так и называют), но она мне не понравилась. Как будь-то на "отвали" советуют, я не уверен.
Так же есть курс из Гарварда, где тоже советуют книгу с динозаврами.
В обоих курсах есть своя куча плюсов. Я проходил их оба, неоднократно(мне просто приятно смотреть что-то качественное. Это как фильм). Скажем, тот что с Беркли - мне нравится больше, из-за подачи автора, по большей степени. Ему фамилия Кьюбатовиц, и он очень харизматичный. Материал заходит на ура, и хочется пересматривать. Я не шучу.
На операционки так же потрать около 300 часов.
О курсе так же в "курсах".
4. Во время изучения операционок, начинай тыкай всякую математику, физику, AI, сети и так далее + комбинируй это с изученим x86 + GPU.
Если будешь продолжать пытаться смотреть того же Кейси или Джона блоу, то многие непонятные вещи будут начинать иметь смысл. Тот факт, что у тебя проблемы с Английским сыграют нам не наруку, но даже автоматически субтитры, которые дают ютаб - полезны. Я каккое-то время сидел на таких, и ничего. Те кто хотят - ищут возможность, а те кто нет - причину. Пытайся смотреть на них. Как они утилизируют все эти знания. Это очень важный момент.
Как только ты начнешь, тебе будет сложно из-за Английского. Ограничиваемся только книгами, и альтернативой всей той практике в виде каналов, может быть книга game codding complete, которая есть у меня в библиотеке + та самая книга Джейсона Грегори, game engine architecture. Если читать их должным образом, все конспектируя и выполняя задания хотя бы через одно, то это послужит достойной альтернативой.
Пытайся с первых же дней поглощать англоязычный контент, не ищи переводов. Ты должен довести себя до такого состояния, что ты не боишься языка. Читай, пытайся понять, переводи. Ничего не получается? На следующий день делай тоже самое, со слезами на глазах, с горем пополам, но делай. Это сработать только так. И помни, что Английский - это не самая главная проблема на твоем пути.
5. Спустя пол года, если ты будешь придерживаться плана, ты узнаешь о многих фундаментальных вещах и найдешь ответы на многие вопросы, которые у тебя сейчас в голове, и приобретешь новые. Где-то все же будут пробелы, это норма, но латать их будет легче, из-за того что у тебя будет выстраиваться какое-то общее понимание и видение проблемы. Ты увидишь много примеров с кодом. Какие-то понятные, какие-то нет. Но факт в том, что ты увидишь примеры кода на реальных проектах. Действительно элегантный код. Код, который "придумали" ребята, кто был задействован в разработке тех же операционных систем. Ты ознакомишься со многими базовыми понятиями программирования. Со всеми основными моментами. И уже после того, как ты узнаешь о чем я сейчас пытаюсь тут тебе сказать, ты можешь без проблем пикать любую книгу со спецификацией языка(тебе уже не нужно будет искать книги как таковые), тебе хватит только официальных доков, потому что у тебя будет понимание, которого нет у многих из-кривого подхода к обучению, и просто ее читать. Точнее читать какие-то конкретные главы, потому что часть спецификации ты будешь знать. Ты, имея тот самый необходимый фундамент, будешь без проблем изучать практически любой язык программирования, и будешь по оглавлениям любой книги ориентироваться как рыба в воде. Ты уже будешь иметь представление, что есть в языках программирования, что можно с ними делать, как они примерно работают и так далее. Например, если тебе нужно будет добавить параллельность в свою программу(ты уже будешь знать, что можно делать программы, которые могут исполняться в нескольких потоках), то ты уже знаешь, что для этого есть определенный сет инструкций, скажем, в x86(ARM, Cell, IA32 и тд), и ты уже просто смотришь, какая имплементация этих инструкций присутствует том или ином языке. У тебя будут появляться претензии к разным языкам, вроде, "Типы данных странные, скудная стандартная либа, приведение типов реализовано через "медленные" инструкции, блок управления многопоточностью странный, и так далее " - это нормально. Ты уже будешь относиться к языкам как к разным инструментам, и к реализациям амбиций всяких там Страуструпов и Далов.

Важно. Прям "с ходу" начинай все конспектировать. Это очень важный момент. Не ленись. Просто приучи себя записывать все самое важное из того, что ты видишь и слышишь. "Самое важное" можешь записывать вообще все подряд. Плохо никому не будет. Так же, не бойся спрашивать себя. Задавать себе вопросы касаемо той темы, над которой ты работаешь. Если ты изучаешь что-то, и у тебя есть недопонимание любого рода, дави себя, пока не разберешься. День, два, три. Сколько потребуется. У меня такое было в свое время со статиком и с пониманием динамического полиморфизма. Когда еще не было опыта достаточно, и я никак не мог понять, что это за модификатор, а объяснение, "Вы можете обращаться к методам с этим модификатором без создания эклемпляра" - меня не устраивало вообще. Я будь-то чувствовал, что тут что-то не то, и я копал настолько низко, пока не разобрался с памятью в принципе и не узнал про то, что для статических данных есть отдельный блок памяти в экзешнике, и для констант он тоже есть, и для инициализированных и не инициализированных данных и так далее. Когда я увидел статик в С++, и то, что он там означает раз в 5 больше, чем в java - меня повергло в шок, но тот факт, что я разобрался с тем, как он работает до этого, я понял статик плюсов буквально моментально. Тоже самое было и с ран-тайм полиморфизмом, и со многими другими вещами

В итоге:
~6+ часов в день. Сделай все, чтобы каждый день принес в твою жизнь как программиста что-то полезное. Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно это получают. Они находят пути. Так было всегда и так будет. Это наша природа. Природа людей. Старайся изучать все в том ритме, о котором я тебе посоветовал. Можешь по возможности корректировать все в зависимости от желаний, но старайся придерживаться абстракций и их порядка.
- Железо>Оси>Мат/физика/AI/Теория языков>хай/лоу левел программирование.

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь, даже если будешь сильно активничать. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится(кладется?) поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации. Чем больше ты знаешь, тем лучше твой код. Все просто. Каждый раз как ты будешь что-то писать, ты будешь писать это по другому, по мере изучения всего этого.
Наша задача, хотя бы обо всем этом узнать поверхностно, потому что сам понимаешь, за год стать человеком, который идет в nvidia и решает их проблемы на уровне core технологий - это сложно. Там ребята десятилетиями работают и все еще сталкиваются с огромным количеством сложностей. Не бойся того, что я говорю, "Узнать обо всем поверхностно". Поверь мне, ты будешь очень глубоко копать временами.
В общем и целом, если ты в течении года будешь заниматься всем тем, о чем мы говорили, то ты потратишь 1500+ часов на сферу. Тебе дальше, уже не будет нужен никакой план и ты будешь, пусть и не четко, но знать что тебе делать каждый день.
