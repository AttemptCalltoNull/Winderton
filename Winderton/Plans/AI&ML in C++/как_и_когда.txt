Основываясь на том, сколько у тебя свободного времени и какой у тебя бэкграунд в целом, мы будем заниматься чуть меньше года, чтобы придти к какому-то переломному моменту тебя, как программиста. Если быть точнее, то 9-12 месяцев. Именно такая будет вилка, когда ты начнешь чувствовать что что-то знаешь.
Сейчас я расскажу тебе о том, как можно изучать Data Science, хотя бы примерно, по срокам.

1. **Знакомишься с фундаментом или теорией Comp Scie.** 
Изучай все в свободном стиле. Знакомься со сферой. Копи вопросы. Резать углы, халявить и халтурить тебе тут не стоит. Я это сделал за тебя, а тебе лишь остаться сидеть, читать, конспектировать(об этом ниже), и ничего более. 
Обрати внимание на книгу Comp Scie an overview(11 edition). Она все еще актуальна, и дает возможность посмотреть вообще на весь CS с высокой колокольни. Задачи от туда делать смысла нет, просто теория.
**Саму Алгоритмику и структуры данных я тебе рекомендую изучать по Корману.** У него нет привязки к языку, и он отлично описывает математику в своей книге.
На основу **алгоритмов и вообще, теории CS потрать около 80-100 часов** Это +- месяц.

2. **Операционные системы.**
Один из важнейших топиков. Ты должен тут будешь узнать само понятие операционных систем, какие они бывают и так далее. Или по другому, ты **узнаешь всю основу программирования программного обеспечения в принципе.**  Операционки - это, наверное, **самый сложный топик в принципе, с точки зрения архитектуры этого софта,** его идеи и возможностей. Разбирая именно операционные системы, ты узнаешь и запомнишь ряд концепций, которые ты постоянно будешь встречать при разработке и использовании ряда технологий, присущих ML'у/ИИ/ и вообще, анализу данных в принципе. Различного рода алгоритмика, всякие Hadoop, Spark, sas, Tableau и так далее. Эти технологии несут в себе core, который лежит в основе операционных систем, и чтобы в тот момент, когда ты будешь разбираться с ними, ты уже примерно представлял, что есть комплексная система . Оконные системы, секьюрити, файловые системы, обработка и преобразование различного рода данных, и так далее, все это фундаментальные вещи. У всего этого есть основа, и это никакая не магия. Это инженерия и это все можно и стоит понять.
Ты определенно будешь разработчиком с перспективой, и какой-никакой претензией на то, чтобы быть хорошим специалистом в своем деле, если осилишь операционные системы как предмет.
По операционкам я тебе дам 2 курса. Один из Гарварда, другой из Калтека. Второй мне нравится больше именно из-за подачи автора. Кьюбатовиц - это такой олдовый программист, которые реально понимает что происходит в мире операционных систем. Я его пересматривал раза 4, так точно, и постоянно нахожу что-то новое. Это как с Фильмом Брилиантовая Рука. Сколько не смотри, постоянно будешь находить что-то новое.
На операционки именно ты потрать не больше месяца. Это хоть и комплексный софт, но для нас есть более насущие вещи, которые стоит изучить.
**На сами операционки потрать так же не более 100 часов, или месяца.**

3. **Математика, о да.**
Тут мы остановимся минимум месяца на 2-3.
В идеале, если ты можешь, то найми себе репетитора. Если же нет, то просто двигайся по тем ресурсам, о которых я тебе уже сказал.
**Математику важно практиковать, как угодно.** Задачки в конце книг, **упражения у Хана,** различно рода проекты с лекций в MIT и так далее. Просто читать математику и надеяться на то, что ты ее поймешь - это слишком наивно. Мы хоть и не будем изучать сложнейшие ее разделы, но это не будет и школьной программой, поэтому тут нужно отнестись серьезно. 
**250-300 часов, чтобы понять всю тут мат.часть - это минимум.** В идеале, позаниматься математикой **около 2-3 месяцев.**
Это все не значит, что тебе стоит изучать все это чисто по секторам. Ты можешь начать изучать операционки и математику в первый же месяц, и двигаться равномерно(Ориентируйся чисто по времени, потраченному на каждый топик). Но суть тут в том, что ты периодически будешь натыкаться на различного рода камни, и знания у тебя будут не структурированы, поэтому, я бы сделал, как и говорил в начале.
**Первые 2+ месяца - это основы основ, а уже математика и Программирование могут идти совместно, начиная со следующих месяцев.**

4. **Само программирование и Python.**
Опять же. Начинаешь тыкать питон во время изучения математики, или даже операционок. Пока ты будешь разбирать железо, тебе хватит С++ и ассембли, а вот **на операционках ты можешь начинать тыкать Питон.**  Без фанатизма, читая спецификации, офф. доки, просматривая того же **Кори или Сентекса(Это челик, который сделал бота в ГТА, с использованием ML'а. Есть туторы на ютюбе)**
**На самом программировании и разборе языка тебе нужно задержаться на 150-200 часов.** Больше не потребуется чтобы начать решать проблемы в филде. Да, само собой, чтобы идти дальше как программист тебе **придется изучать тонкости питона,** но на первых этапах(в первый год), тебе будет достаточно позаниматься плотно питоном около месяца.

5. **Практика.**
Где-то **спустя пол-года "теории", ты начнешь писать различного рода проекты.** Проекты ты увидишь в следующем разделе. Твоя задача их **переписывать, разбирать, и закидывать в своей репозиторий на гитхабе.**
Во время этой практики, ты так же будешь подтягивать математику, питон, читать различного рода статьи и ресурсы, и те самым выйдет так, чтобы эти полгода проведешь в ритме "латаю дыры в том, чем занимался предыдущие пол года + реализовываю кучу проектов".


Важно. **Сразу, с первых же дней, вводи себе в привычку все конспектировать.** Просто приучи себя записывать все самое важное из того, что ты видишь и слышишь. Не бойся спрашивать себя. Задавать себе вопросы касаемо той темы, которую ты разбираешь. **Если ты изучаешь что-то, и у тебя есть недопонимание любого рода, дави себя,** пока не разберешься. Деть, два, три. Сколько потребуется. У меня такое было в свое время со статиком и с пониманием динамического полиморфизма. Когда еще не было опыта достаточно, и я никак не мог понять, что это за модификатор, а объяснение, "Вы можете обращаться к методам с этим модификатором без создания эклемпляра" - меня не устраивало, и я копал настолько низко, пока не разобрался с памятью в принципе и не узнал про то, что для статических данных есть отдельный блок памяти в экзешнике, и для констант он тоже есть, и для инициализированных и не инициализированных данных и так далее. Когда я увидел статик в С++, и то, что он там означает раз в 5 больше, чем в java - меня повергло в шок, но тот факт, что я разобрался с тем, как он работает до этого, я понял статик плюсов буквально моментально.

В итоге:
**Сделай все, чтобы каждый день принес в твою жизнь как программиста что-то полезное.** Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно получают. Они находят пути. Так было всегда и так будет. Это наша природа. Природа людей. Старайся изучать все в том ритме, о котором я тебе посоветовал. Можешь по возможности корректировать все в зависимости от желаний, но старайся придерживаться плана.

**Основы СS => Операционки => Математика/Программирование => Практика**

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь, даже если будешь сильно активничать. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится(кладется?) поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации или какому-то упрощению. Чем больше ты знаешь, тем лучше твой код. Все просто. Каждый раз как ты будешь что-то писать, ты будешь писать это по другому, по мере изучения всего этого.
По истечению +- года, я более чем уверен что ты придешь туда, куда ты собрался.

