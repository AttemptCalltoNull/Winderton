Ну чтож, что тебе делать мы поняли, ну а теперь переходим к тому, как и когда все это делать.
У тебя есть примерно 4 часа в день(просто по статистике, ты будешь +- столько и заниматься каждый день), и с вычетом всех выходных, праздников, и различного рода форс-мажоров, за год ты будешь иметь около 1.2к часов, если будешь придерживаться плана процентов на 90. 
Среднестатистический человек может заниматься чем-то около 3-4х часов в день с максимальной продуктивностью, а дальше она начинает спадать, и очень интенсивно. Чаще мы этого не замечаем, но проводился рад исследований, который это подтвердил.
Поэтому, я беру в расчет то, что ты точно будешь заниматься 4 часа в день в среднем, соответственно ты будешь на пике своей продуктивности.

И так, давай посмотрим что мы имеем.
1. Знакомишься с фундаментом. Изучай все в свободном стиле. Знакомься со сферой. Копи вопросы. Резать углы, халявить и халтурить тебе тут не стоит. Я это сделал за тебя, а тебе лишь остаться сидеть, читать, конспектировать(об этом ниже), пытаться что-то написать, тыкать инструменты и в общем и целом - интересоваться. Те 3 книги дадут тебе необходимое понимание, чтобы двигаться дальше.
- Code. The hiddne language of hardware and software.
- Introduction to computing systems.
- CS. An overview. 11 edition.
Всем этим делом заниматься около 1 месяца, т.е на выходе у тебя должно быть 100+ часов.
2. Платформы. 
Так как английский у тебя прохладный, то курсы поглощать мы сразу не сможем, ну или по крайней мере, не в том темпе, в котором хотелось бы, поэтому ограничимся статьями и книгами. Книга по платформам для новичков и новичков+ - это книга Пата и Паттела, с который ты на этот момент уже будешь знаком. Если она тебе по каким-то причинам не зашла, то придется сделать так, чтобы зашла, потому что толковых альтернатив крайне мало, а переходить на того же Танненбаума, не осилив Паттела - я крайне не рекомендую. Если же ты ее осилишь, то тогда ты переходишь на Эндрю иди Хеннеси, да. Нужно почитать то, о чем они пишут и пытаются донести до людей, ну хотя бы поверхностно. 
Так же, по изучению платформ у меня есть точно один курс, который я могу смело рекомендовать. У него есть субтитры, что немало важно именно для тебя, и даже если ты в себе не уверен, то все же попробуй его попробовать осилить. Он точно стоит того.
3. Операционные системы.
Один из важнейших топиков для тебя. Ты должен тут будешь узнать само понятие и конечно же ознакомиться с тем, как абстрагировались от arm'а.
Операционки - это, наверное, самый сложный топик в принципе, с точки зрения архитектуры этого софта, его идеи и возможностей. Разбирая именно операционные системы, ты узнаешь и запомнишь ряд концепций, которые ты постоянно будешь встречать при разработке тех или иных фич в Android или iOS. Оконные системы, секьюрити, файловые системы и так далее, обе эти операционки это unix like системы. У всего этого есть фундамент, и это никакая не магия. Это инженерия и это все можно и стоит понять. Ты определенно будешь разработчиком с перспективой и какой-никакой пртензией на то, чтобы быть хорошим специалистом в своем деле, если осилишь операционные системы как предмет.
По операционкам я тебе дам 2 курса. Один из Гарварда, другой из Калтека. Второй мне нравится больше именно из-за подачи автора. Кьюбатовиц - это такой олдовый программист, которые реально понимает что происходит в мире операционных систем. Я его пересматривал раза 4, так точно, и постоянно нахожу что-то новое. Это как с Фильмом Брилиантовая Рука. Сколько не смотри, постоянно будешь находить что-то новое.
Далее, пойдет расслоение. Android и iOS отдельно. Ты можешь начинать хоть с 4 хоть с 5, как тебе удобно. Я сделал так, чтобы они были независимы друг от друга.
4. Специфика Андроида.
Знакомишься с его архитектурой, пытаешься понять слабые и сильные места этой операционки. Разбираешься с параллелями между тем же iOS, и олдами, вроде Simbian. 
Для этого ты используешь курс из "что", который посоветовал мой знакомый разраб + конечно же, знаменитый курс из Стенфорда. Его я скину в курсах.
Этого будет достаточно, чтобы получить необходимый бэк для того, чтобы двигаться дальше.
Язык. 
Java, Kotlin.
По джава, читаешь интродакшены Шилдта из моей библиотеки. Они в каком-то смысла стали уже классикой, поэтому тут далеко ходить не нужно. По котлину, к сожалению, ни я, ни мои коллеги порекомендовать ничего не можем, потому что язык относительно новый, и все туториалы - это лишь хайп, или какой-то базис, который можно узнать и на офф. сайте. Ты, в теории, можешь пробовать осилить котлин сам, но я бы рекомендовал стартовать именно с java. Так будет надежнее и вернее.
Базы данных, NDK, Networking, restfull, аутентификации, navigation и все остальные прекрасности, которые связаны с Андроидом, ты узнаешь из курса, который я тебе скинул, и пары книг, который я тебе еще скину.
Это будет что-то вроде рихтовкой тебя как инженера. Основу ты уже будешь знать, в принципе как и большую часть этих понятий, просто тут ты к ним переходишь явно, если вдруг по какой-то причине не встретишь или пропустишь их до этого
Agile, TDD, OOP, ECS, DOD и так далее - это все усовершенствование твоих навыков программирования, и скажем, изучать ECS вместо OOP, не зная ООП сразу же - это одна из худших идей, которые только могут придти в голову. Не парься об этом, пока не будешь комфортно чувствовать себя в том же Java core.
.
5. IOS
Swift + Objective-C.
Второй язык, так или иначе, медленно но верно отходит на второй план во всех смыслах этого слова, поэтому тут мы будем говорить только в контексте swift.
Ты начинаешь изучать swift и весь его тулчейн с первых же месяцев.
Дело в том, что если просто начать изучать swift, и забить на все то, о чем я тебе сказал выше, то твое обучение быстро превратиться в нечто скучное, нерабочее и занудное. По мимо самой спецификации и инструментария, тебе нужно знать основу cs, чтобы лучше понять то, из чего состоит Swift, зачем он был придуман, если можно писать все на С++, в чем его сила, как реализованы все модули этого языка, в отличии от других и так далее.
По свифту полно различного рода книг, особенно от 15-16 года, когда он только начал набирать обороты, и люди начали на этом пытаться заработать. Так же по языку полно различного рода курсов на площадках вроде udemy, coursera и так далее. Все это тебе не пригодится.
Мнение опытных iOS девелоперов, которые помогали писать мне эту программу, сошлось на том, что с данных подходом изучения ветки, тебе хватит офф доков от apple.
https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html
+
Если вдруг они каким-то образом не зайдут, то окей, можно попробовать книгу Мартина:
Swift: A Comprehensive Intermediate Guide to Learn and Master the Concept of Swift Programming.

cs+english+swift. Это твой алгоритм действий на первые месяцы, если ты решишь начать с iOS.
Далее идет Cocoa touch + swift + другие инструмены + практика.
По Cocoa touch на сети нет вменяемого материала, собранного в одном месте + сам API просто огромен, соответственно, тебе стоит сфокуссироваться на изучении отдельных его частей, в отдельных местах.
Сам фреймворок сложен в архитектуре, и его устройство можно изучать годами, поэтому вот тебе несколько его "частей", на чем именно стоит сконцентрировать внимание:
- UiKit(https://developer.apple.com/documentation/uikit)
- UIViews(https://www.weheartswift.com/uiview-fundamentals/)
- Layout(http://tech.gc.com/demystifying-ios-layout/)
- Animations(https://www.objc.io/issues/12-animations/) Тут придется чутка повозиться с objective-C. Есть и туториалы основанные на Си, но этот именно является гемом.
- Layers(https://www.raywenderlich.com/402-calayer-tutorial-for-ios-getting-started)
- Foundation(https://developer.apple.com/documentation/foundation)
- Core Motion(https://developer.apple.com/documentation/coremotion)
- Notifications(https://medium.com/yay-its-erica/usernotifications-in-swift-3-part-1-d250e54440c1)
- Locations(https://badootech.badoo.com/ios-location-tracking-aac4e2323629)

Это самые основные парты cocoa touch, которые тебе придется мастерить.
Само собой, там есть и другие, более специфические, но к ним ты придешь когда будешь увереннее чувствовать себя во всем этом.

Где то через 7-9 месяцев следующего ритма:
Университетский режим:
- час CS
- 40 минут Английский
Далее либо Android
- java+ndk+sdk android - час
- практика(практику бери ту же самую, которая указана в паре с iOS)
Либо iOS
- час swift/obj-c
- час  изучение Cocoa touch + практика

Либо же кастомный режим:
2-3 месяца - основа CS
три месяца iOS
три месяца Android
Далее advanced CS + углубления в touch и SDK + куча практики.

В качестве самой практики:
https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/
https://www.makeuseof.com/tag/want-make-iphone-apps-6-projects-beginners/

Это пару статей, где ты найдешь "шаг за шагом" объяснения, как написать несколько своих pet проектов, используя весь спектр знаний описанный выше + немного пенки сверху.
И начиная с этого момента, ты продолжаешь латать дыры в знаниях swift, качать знания операционных систем, изучать особенность cocoa touch, + ряда других инструментов, вроде тестирования, профайлинга и так далее.

Где-то через 5-6 месяцев, ты начинаешь качать именно software engineering навыки, читая на досуге того же Progratic programmer, GoF, Макконела и тому подобное. Т.е знакомишься ближе с такими терминами, как: design patterns, MVC, MVP, MVVM, SOLID, TDD и тому подобное.
Это все будет выступать больше сахаром в резюме или чем-то подобным, нежели практически применимым, потому что объективно, у тебя на тот момент будет около 600+ часов нахождения в сфере. Чтобы полностью понимать то, что я сказал выше, требуется намного больше времени, но об этом всем желательно хотя бы знать, потому что это важные момент.
На этом этапе, ты уже +- будешь понимать что тебе делать каждый день, и как примерно тратить время дальше.
Единственный момент, который бы я еще хотел прояснить, это git.
Тебе нужно закидывать все свои проекты туда с первых же месяцев. Гит - это сложная штука, но основа ее учится на неделю, буквально. Тебе нужно набивать профиль на гит хабе, привыкать к коду и тому, как это все взаимодействует, потому что если ты в нужный момент не ответишь просто на простой вопрос, ты можешь не получить тот же оффер.
Короче говоря, github - это важно.

Теоретический cs.
Алгоритмы, структуры данных, дискретка и так далее - это все лирика и к этому ты перейдешь уже того, когда либо будешь искать работу, либо самообразования в свободно время. Алгоритмика и коллекции - это такой топик, который учить просто так не имеет никакого смысла. О ряде этих концепций ты узнаешь во время изучения операционных систем, где ты увидишь как это концепции использованы на реальном продакшене, а о ряде из книг того же Кормана или Седжвика, когда будешь готовится к тому или иному интервью.

Важно. Сразу, с первых же дней, вводи себе в привычку все конспектировать. Просто приучи себя записывать все самое важное из того, что ты видишь и слышишь. Не бойся спрашивать себя. Задавать себе вопросы касаемо той темы, которую ты разбираешь. Если ты изучаешь что-то, и у тебя есть недопонимание любого рода, дави себя, пока не разберешься. Деть, два, три. Сколько потребуется. У меня такое было в свое время со статиком и с пониманием динамического полиморфизма. Когда еще не было опыта достаточно, и я никак не мог понять, что это за модификатор, а объяснение, "Вы можете обращаться к методам с этим модификатором без создания эклемпляра" - меня не устраивало, и я копал настолько низко, пока не разобрался с памятью в принципе и не узнал про то, что для статических данных есть отдельный блок памяти в экзешнике, и для констант он тоже есть, и для инициализированных и не инициализированных данных и так далее. Когда я увидел статик в С++, и то, что он там означает раз в 5 больше, чем в java - меня повергло в шок, но тот факт, что я разобрался с тем, как он работает до этого, я понял статик плюсов буквально моментально.

В итоге:
~4+ часа в день. Сделай все, чтобы каждый день принес в твою жизнь как программиста что-то полезное, потому что ~4 часа в день - это достаточно, но можно и больше. Все мы знаем, что те, кто действительно чего-то хотят, они это рано или поздно получают. Они находят пути. Так было всегда и так будет. Это наша природа. Природа людей. Старайся изучать все в том ритме, о котором я тебе посоветовал. Можешь по возможности корректировать все в зависимости от желаний, но старайся придерживаться плана.
Основы СS=>Железо=>Операционки=>Основа Андроида/iOS=>Языки/базы данных/тул-сет/frameworks/softwaredev=>другое

Сфера огромна и она постоянно движется. Пройдет год, а ты все еще будешь временами думать, что ты ничего не знаешь, даже если будешь сильно активничать. Это нормально. Мы должны выучить самые основные вещи, потому что они меняются очень медленно, и поняв эти основы, все остальное, что ложится(кладется?) поверх будет не такой уж и сложной задачей.
Изучая все это, ты постоянно будешь находить какие-то приятности, которые можно применить в своей работе, но чаще всего, все будет сводиться к оптимизации или какому-то упрощению. Чем больше ты знаешь, тем лучше твой код. Все просто. Каждый раз как ты будешь что-то писать, ты будешь писать это по другому, по мере изучения всего этого.
Занимаясь по 4+ часа день, и год ты потратишь на себя около 1.2к часов. Как только ты будешь подходить к 1к, то можешь уже без проблем пробоваться тыкаться во всякие t3 конторы, на позиции Джунов.