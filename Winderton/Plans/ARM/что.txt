Во первых, спасибо за +. Каждый доллар идет на усовершенствование и потенциально частый выход контента. Респектабельный донор.

Ну что, Поехали?
Знания у тебя поверхностные, поэтому будем отталкиваться от другого, а именно от твоего желания учиться и энтузиазма. Плюс у нас сейчас один - это то, что тебя не придется переучивать. С людьми, кто на нуле - легче работать. Я об этом неоднократно говорил. Они знакомятся со сферой, по моим наставлениям, верю что в правильно заданном ключе и с грамотно расставленными приоритетами.
 С другой же стороны, с людьми, кто уже имеет какой-никакой опыт, все становится сложнее. Они уже что-то знают, и для них что-то менять становится сложнее. Они относятся к некоторым вещам как к чему-то единственно верному, и даже если их мнение некорректно, это помогло им сформировать какое-то представление о сфере или о предмете, которое все же решает их задачи.
С тобой я буду работать как с первой группой людей, и чтобы я был уверен в том, что ты будешь в состоянии поглощать весь контент, который тебе придется поглощать, я, перед самим ARMом(мобильной разработкой, мы будем топить именно сюда, да), прогоню тебя по более базовым вещам.
Мы будем начинать с самых основ, и пройдемся только по самым основным топикам, которые являются основой всего, что сейчас работает в сфере. Это нужно для того, что сейчас, одной из главных проблем многих людей, кто занимается программированием является отсутствие фундаментальных знаний. Это признают все вменяемые люди, и отрицают все остальные. Другими словами, "Если у тебя есть время, то свой computer science, позанимайся математикой, ознакомься с фундаментом той ветки, которую выбрал." Это сказал бы любой, кто занимается сферой достаточно долго, потому что без фундаментальных знаний ты будешь постоянно "лажать" в тех или иных местах своей деятельности. Т.е мы будем идти по сфере таким образом, чтобы у тебя пробелов в знаниях оставалось меньше, а корректных вопросов копилось больше.
Чтобы более точно понять то, зачем тебе нужен фундамент, обрати внимание на следующую аналогию:
Нам во всех видах любой деятельности изначально дают какой-то базис того, что и как нам стоит делать. Иногда это происходит явно, а иногда - нет. Например в садике нас учат общаться с людьми и вести себя в обществе корректно. В школе нас учат правильно разговаривать, на тех же уроках русского и литературы, например. В автошколе нас учат основам ПДД, потому что без них мы будем творить откровенную херню на дорогах и так далее.
Тут в программировании - тоже самое, только люди этого не хотят понимать, по неизвестным мне причинам. Возможно, хочется сэкономить время, побыстрее пойти и заработать денег, побыстрее создать какую-то игру или что-то еще, поэтому люди сразу начинают учить языки программирования, фреймворки, игровые движки и так далее, забывая о той самой грамотности, которая нужна для того, чтобы быть способным хоть на что-то в этой сфере. Многие не знают даже того, какой смысл в системах счисления, разницы между api и abi, организации памяти,  или каких-то более фундаментальных вещей, вроде: почему так много языков программирования, если можно сделать один, или, как работает компьютер в принципе. Я, за счет своего опыта и берусь делать подобные обучающие программы, потому что видел и проходил через достаточное кол-во вопросов, на которые нашел ответы. Однажды я видел как парень ныл на stackoverfow про то что - "Зачем сейчас что-то оптимизировать, зачем писать на Си, или еще хуже, ассемблере? У нас ведь такие мощные процессоры, десятки гигабайт оперативной памяти и тому подобное", и так же я видел как над ним смеялись, так как это отличный пример, когда фундаментальные знания некорректны на 100%.
Чтобы у тебя не было подобного, и чтобы ты с первых месяцев рос в правильном направлении, я скажу тебе как именно изучать самые основные, и в тоже время важные топики, которые окажут максимальное влияние на тебя как программиста, а далее сделаем плавный транзишен в то, как развиваться как разработчик ARM(ios, android девелопер)
Но перед тем как начинать погружаться во все прелести Comp Scie и программинга, нужно разобраться с Английским.

Смотри, во первых касаемо меня, то я учил английский с англоговорящими, большую часть своего времени. Это может показаться странным, но так и есть.
Engvid.com(Alex, Rebecca, Emma). В скобках перечислены мои любимые преподы. Качественная прокачка навыков именно слуховых, идеальная дикция(ну, тут не мудрено), огромная доля харизмы преподавателей и так далее. Советую присмотреться к этому ресурсу, прям с первых дней изучения. Дело в том, что там объясняют хоть и на английском + весь ресурс вообще на английском, но там есть субтитры + темы есть очень легкие, просто наблюдая которые, ты начинаешь понимать, волей неволей. Привыкать к языку с подобных видосов - это бальзам. Я не уверен, что ты хочешь от языка в своей жизни, но для меня он является чем-то особенным и обязательным, и я иногда смотрю даже видосы о том, о чем уже знаю. Не знаю как это называется. Может быть я просто фанатик?
Касаемо литературы.
Книга - english grammar in use(красная, синяя, зеленая. Именно в такой последовательности). Красная прям совсем для новичков, а вот синяя - самое оно. Я ее даже в бумажном варианте приобрел. Ты просто берешь и читаешь эти книги. Да, они на английском, но они написаны для интернациональной аудитории, т.е написаны так, чтобы их могли понять все. Там очень простые примеры, и все примеры похожи между собой.
А вообще, технический английский - очень простой. Что чтение литературы, что просмотр лекций. Тебе просто нужно узнать какую-то основу, а далее все будет просто. А эту самую основу ты сможешь найти в красной и синей книге.
Так же, лично я смотрел сериалы в оригинале, с английскими субтитрами.
Было сложно первое время, но я быстро поймал ритм.
И да, еще хочу заметить, что самые первые уроки, которые я брал, были уроки полиглота(слышал наверное). Там такой дядька на youtube, учит английскому за 16 часов. Я смотрел его раз 5, все 16 уроков, и это, думаю, дало мне какую-то базу, перед тем как я стал двигаться дальше. Но я бы не сказал, что тот полиглот - это идеальный вариант именно сейчас. Куча же различных ресурсов есть. Начиная от ютюб туторов, вплоть до мобильный приложений. Тут явно не промахнешься.
Так же я играл в онлайн игры, где меня форсило знать язык, поэтому это может помочь, если ты играешь. Я буквально окружал себя английским. Операционка на нем, телефон на нем, через не хочу чтение английских слов, прохождение всяких там тестов в интернете и так далее. В итоге, я говорю на нем свободно в 9 диалогах из 10., но это спустя уже почти 6 лет.
Ну и последний ресурс, это italki.com.
Это сайт, где можно бесплатно найти себе друга из США, Англии или другой, англоговорящей страны. Я там и познакомился со всеми теми, с кем регулярно созваниваюсь и практикуюсь.
Тут фишка в том, что нужно как можно больше стараться потреблять англоязычного контента. Смотреть, слушать, писать, читать. Особенно слушать. К речи нужно привыкнуть.
Я сказал что почти все время учил инглиш с англоязычниками, но был и момент, когда я смотрел того же самого полиглота раз 5+. Там я узнал прям самую-самую базу, после которой взглянув на много примеров текста, у меня были проблемы только со словарным запасом. Спустя буквально пол года(в твоем случае это должно быть примерно пару-тройку месяцев), я перешел на англоязычную тему. Книги мерфи, engvid и так далее.
Язык учится легко, если ты реально хочешь его выучить.

И так, ладно. Это английский. Что там на счет основной темы?
Мы начнем твой путь с поднятия архивов, которые поднимают во всех уважающих себя вузах. Вообще, люди иногда говорят, "Вот он самоучка, поэтому он так хорош. Все самоучки хороши". Но если задуматься, то кто такой самоучка?
Давай просто возьмем в пример двух людей:
Первый идет в вуз и учится там по предоставленной программе. У него есть лекции, зачеты, контрольные работы, общение с одногруппниками, преподаватели, библиотека и другие ништяки, которые даёт вуз.
Второй человек не идет в вуз, а учится сам.
В первом случае, у человека есть контроль, у него есть дополнительные мотиваторы, у него есть ВУЗ, из которого его могут выгнать.
У второго человека нет ничего вообще. Он сам себя контролирует. Он занимается когда хочет, и учит что хочет. У него нет какой-то там программы, и это может быть как плюсом, так и минусом.
Но что я сейчас вообще хочу сказать?
Второй то человек учится на каких-то материалах. На каких?Да на тех же самых, на каких первый. Книги - так точно одни и те же, если мы рассуждаем в контексте хороших книг.
Единственный момент, который реально лучше в первом случае - это Препод, который зная свой предмет, зная книги, которые он рекомендует, подает материал в более сжатом и эффективном виде, в то время как чел без вуза создает этот материал для себя сам.
Смысл этой части в том, что хоть у меня и нет высшего образования, но учился я по университетским лекциям. Читал я книги, которые рекомендовали хорошие преподы, и которые давали инфу в том самом сжатом/плотном формате, только я еще занимался чем-то, чем я реально хотел заниматься, и не ждал, пока придет новый семестр с новыми предметами. И сейчас, основываясь чисто на моем опыте, я и рассказываю что именно тебе делать.
Итак, к архивам. Первый из них - это вообще Основы Основ, или прогон по всему, что есть в Comp Scie, и как работает вообще "ВСЁ". Это как будь-то тебя взяли на работу, и пару дней гоняют по code base и по архитектуре проекта, чтобы ты понимал с чем имеешь дело.
Для этого у меня есть 3 интересных книги.

1. Computer Science an Overview.
2. Introduction to computing systems.
3. Code. Hidden language. (Этой книги нет в библиотеке. Можешь не полениться, и сам найти.)

Я бы классифицировал их(эти книги), следующим образом:
Первая - это обзор всего Comp Scie с высокой колокольни. Там много общих моментов. Я всем рекомендую эту книгу. Она по своему хороша.
Вторая и третья - это углубление больше в программирование.
Вот касаемо третьей книги, то она самая простая. Петзольд написал простым языком о сложном. Но он там опускает ряд важных вещей, о которых ты потом можешь узнать от Таненбаума, того же самого.
Ну а вообще, читать их можешь в любом порядке. Открой каждую, посмотри на оглавления, прислушайся к манере автора, прочувствуй подачу и так далее. Тебе главное их прочесть. Это больше теория, и ее нужно в себя впихнуть столько, сколько сможешь.
Практика.
Касаемо заданий из книг - тут я не уверен. Я их никогда не делал, и возможно, в какой-то момент времени, я был из-за этого слабее, поэтому ты можешь решать, например, "через 1". Т.е не 20 заданий, а 10. Дело в том, что они часто не несут в себе большого смысла(ИМХО), и лучше перейти на следующий топик, нежели разбираться с чем-то скучным из предыдущего. Да, именно скучным. Для меня всегда было скучным решать шаблонные задания.
Народ спрашивает частенько про всякие сервисы, где можно решать задачки. Мне лично это не интересно и в этом мое влияние на тебя, как хорошее, так и плохое.. Эти задачки мало общего имеют с тем, с чем я хочу работать. Я хочу разбираться с тем, как пишутся системы для запуска ракет, а не решать ЕГЭ по информатике за 11 класс.
Т.е те задачи, что с сайтиков, что с книг, мало общего имеют с кодом и решениями, которые лежат на продакшене любой, даже мало-мальской системы.
Этими задачками ты максимум чего добьешься, так это закрепления примитивного синтаксиса твоего языка и решения каких-то задач со всякими переборами, поисками и сортировками массивов и строк. Да, там, в теории, могут быть интересные задачи в плане алгоритмов решения, но опять же, это все искусственно, и на практике слабо применимо. Мое мнение.
Короче говоря то, с чем тебе сейчас стоит разобраться в первую очередь - основы основ. Узнать обо всем по чуть-чуть и получить как бы big picture, не вдаваясь в подробности.

Сразу после того, как ты почитаешь и посмотришь на все то, из чего стоит наша сфера, тебе нужно приступить к изучению самой платформы, на которой ты будешь работать. И да, она у тебя одна. Это железки.
Других "Платформ" для тебя не существует, и не важно на каком уровне ты пишешь: Физику на Си, сервер на go или игрушку на java.
В конечном счете твой код будет разбит на инструкции, которые будут лежать где-то в памяти, а процессор будет их от туда дергать и исполнять. (Это конечная любого исходника)
Ты должен разобраться с железками, чтобы лучше понимать что ты делаешь. Чтобы код, который ты написал, можно было масштабировать. Код, который будет работать годами на разном железе.
Для ознакомления с платформой и ее близлежащими уровнями, у меня точно есть один курс, который я мог бы смело рекомендовать. Подробнее о нем ты узнаешь в соответствующем разделе, а касаемо книг - то тут мы снова возвращаемся к одной из тех, кто я тебе уже дал, а именно: Intro to computer systems. Patt & Patel.
В этой книге ты узнаешь о железках на уровне "знаю что они есть и как примерно работают". Этого не достаточно. Эта книга не дает знаний, чтобы можно было сказать, "я знаю платформу". Далее тебе нужно будет переходить на что-то по серьезнее, и у нас выбор на данном этапе не велик. Ты просто берешь Танненбаума или Хеннеси и читаешь их.
Эндрю Таненбаум - MITшник, инженер, и просто чел, который общается со всякими Торвальдсами на равных. Т.е он знает, о чем говорит, и в своих книгах углубляется как следует. На него нужно переходить уже тогда, когда ты имеешь хотя бы общее представление о том, о чем ты хочешь узнать.
Книга по железка у него называется Structured Computer Organization, и ее главная проблема в том, что там очень странные вопросы в главах, поэтому - да, имей это ввиду.
Хеннеси же менее звонкий человек, и изложение у него попроще, но это тоже уровень Танненбаума. 
Этот курс и эти книги дадут тебе уже солидное понимание платформы в целом, и от туда можно переходить в специфику того, чем ты занимаешься и какая платформа у тебя основная. x64, ARM, IA32 и так далее. У каждой из них есть мануалы на сети, где рассказывается об архитектурах самих камней. В любом случае, этих знаний будет достаточно, чтобы получить то самое понимание, которого у многих нет, и которое необходимо чтобы двигаться дальше. Во время изучения всего этого, ты узнаешь и о программировании, и об языках, и о парадигмах программирования, и о многом другом, и уже тогда, нам как software engineer'ам нужно двигать выше по абстракциям.
Знание и понимание того, что там есть под капотом, и как оно работает - это must have, безусловно, но реалии таковы, что мы должны смириться с определенным уровнем абстракций, чтобы писать какие-то рабочие куски кода.

Пока ты изучаешь железо и близлежащие топики, ты неоднократно будешь слышать об операционных системах, как абстракциях к своей платформе. Операционные системы - это настолько комплексный софт, изучая который - ты максимально многогранно раскачиваешь себя как программиста. Но ты постоянно должен думать о железе в первую очередь, а не о каких-либо абстракциях, которые тебе дают к нему доступ. После того, как ты внесешь себе это в привычку, тебе нужно разбираться с этими самыми абстракциями. Необходимо понять их смысл как абстракций и как они работают. Для чего они нужны. Почему их так много и тому подобное. Этот софт - это основа всего другого софта, поэтому без понимания осей - нет понимания того, как работают многие другие технологии, такие как: игрушки, антивирусы, браузеры и многое другое.
Не смотря на то, что многие говорят об абстракциях как о чем-то плохом, хорошие абстракции все же имеют место быть, но дизайнить хорошие абстракции подразумевает иметь глубокое понимание платформы, иначе то, что ты там наабстрагируешь будет очереднярским помоем, который будет создавать больше проблем, нежели решать. Другими словами, хорошие абстракции сделать сложно - это да, но это возможно, и только с опытом приходит понимание того, стоит ли тут абстрагироваться дальше, или именно этот уровень абстракции является оптимальным. Пример - мы не остановились на assembly в свое время, и сделали C, который был в каком-то смысле идеальной абстракцией над assembly, но затем, мы сделали С++, Python, Java, Go, Swift, и ушли так далеко от С, что у нас появилась куча "плохих" абстракций и имплементаций различного рода языковых фич, что при их использовании мы намеренно вгоняем себя в кучу различного рода проблем, но c этим уже ничего не поделать, эти абстракции уже в в продакшене, и придется с ними мириться. И как раз таки изучение операционных систем дает + к понимаю того, как строятся хорошие абстракции.
По операционкам у меня есть отдельная книга в библиотеке, которая так же есть у меня и в бумажном варианте.(она настолько крута, что я решил приобрести ее в бумажном варианте) Я не уверен, но на мой взгляд - это лучшее, что пока есть(Есть и тот же самый Танненбаум, но эта книга наголову выше). Информативно, много, с практикой, доступно. Там, конечно, есть и моменты из серии "HEAD FIRST"(это книги для людей, которые прям днища от слова совсем), но без этого никуда. Автор же деньги зарабатывает, и пытается охватить как можно больше народа. Помимо книг, по операционкам у меня есть один курс, но подробнее о нем ты узнаешь в соответствующем разделе.

Когда ты дойдешь до этого момента, у тебя будет минимальная теоретическая база по ряду основных топиков, которые необходимы для переходу к дальнейшим действиям. Я делаю ставку на то, что все эти топики ты выучишь на достаточном уровне, не обманывая себя, и знакомясь со всем на столько подробно, на сколько сможешь.
Я советую тебе обратить внимание на таких ребят, как:
- handmadehero(не имеет отношения к андроиду или ios, но его стоит смотреть для общего развития. Он показывает много полезное, что применимо на всех платформах)
- bisqwit(то же самое что и первый. Один из лучших на ютюбе в плане программирования)
- silverspaceship, sean carret(Шон просто показыает то, как стоит работать с лоу-левелом и системным программированием)
- javidx9(Новичок относительный на youtube, но опыт огромный. Стоит смотреть для общего развития)
- thebennybox(Старая школа. Много полезной инфы именно по работе с графикой)
- Bandyte(Акцент подводит иногда, но есть чему поучиться на ранних этапах именно по лоу-левелу)
- bitwise(чел, который 15 лет проработал в nvidia, oculus и тд показывает как создать свой компьютер с нуля)
Эти ребята на научат тебя программированию под ARM, но это те немногие, которые могут научить тебя хоть чему-то в плане практики.
У этих программистов ты сможешь найти примеры написания различного рода проектов. Увидеть в действии то, о чем я говорил тебе тут, ранее, да и вообще, посмотреть как люди с опытом более 20 лет пишут код и решают те или иные задачи. Ты должен будешь увидеть, как примерно все это делают люди, которые прошли через тысячи различных ситуаций связанных с написанием кода, и присмотреть, как каждый из них решает одну и туже задачу. 

Но окей, на этом этапе мы можем переходить уже к самой специфике программирования под ARM, потому что у нас ей необходимый фундамент, чтобы его понять.
arm - это микроархитектура, основанная на risc ISA. Т.е программирование арма отличается от программирования, скажем, того же x86-64. В arm есть ряд инструкций, которые, скажем, направлены на сохранение энергии, или та же графика с использованием opengl там используется не последних версий, а opengl es(тот же что и в браузерах), поэтому и подход к написанию графики тут тоже отличается + многое другое. Т.е. ARM - это упрощенный набор инструкций, который выигрывает в потреблении энергии, но проигрывает в производительности. За счет этого там хуже графика, менее продвинутые редакторы и так далее. Во время изучения железок, тебе стоит обратить пристальное внимание на то, где ты будешь встречать термины: arm, risc, risc-v, mips и так далее.
Но на этом этапе, у тебя уже будет некое виденье проблемы, и нам не нужно будет делать фокус именно на аппаратном уровне, и мы будем изучать уже сам тул-чейн, чтобы программировать мобайл.
Во время изучения операционок ты узнаешь достаточно о мобильных операционках, поэтому о5ть же, мы экономим, и сразу переходим к тул-чейну и специфике android'а.

Как ты уже знаешь, у нас есть два лагеря:
- iOS 
- Android
Я не вижу смысла вводить тебя в курс дела как пользователя, потому что более чем уверен, что ты знаешь основные различия этих осей. Мы же сейчас посмотрим на них с точки зрения программиста.

И так, Android.
Во первых, тебе нужно понять, что такое Android и как он работает, хотя бы в общих чертах.
- https://www.zdnet.com/article/how-android-works-the-big-picture/
- https://javarevisited.blogspot.com/2013/06/introduction-of-how-android-works-Java-programmers.html

Это пара "поверхностных" статей, которая даст тебе примитивное понимание, чтобы ты мог начать гуглить в правильном направлении.

После этого, переходишь на разбор архитектуры Андроида. Для этого есть курс(который даже есть на русском языке, но я советую читать/поглощать его на Английском), в котором в полной мере рассказывается обо всем том, что тебе нужно узнать чтобы идти дальше. Этот источник мне порекомендовал человек, который занимается iOS разработкой в Luxsoft'е уже 7+ лет. Он знает о чем говорит, а я говорю об этом тебе.

- https://startandroid.ru/ru/courses/architecture-components.html

Там ты узнаешь про саму архитектуру андроида + про весь базис и цикл разработки именно под эту операционку. Интерфейсы, лейауты, файловые системы, менюшки, настройки, сервисы, адептеры и так далее.

Далее, это язык.
Для android'а, как тебе известно, используется Java, но помимо Java, еще используют Kotlin и Javascript. Это просто альтернативы друг дружке.
Kotlin стали использовать, потому что Java типа старая + на Kotlin'е ты пишешь меньше кода, а получаешь тот же профит, что и в Java + Kotlin на back'е имеет ту же самую jvm, что означает что все то, что есть в плане либ для java, есть и для Kotlin'а. 
Минусы котлина в том, что он компилируется дольше, чем java + ему нужно учиться, из-за его специфичного синтаксиса, а стоимость "переучки" людей с одного языка на другой - крайне высока.

Базы данных.
Это то, с чем тебе  придется работать не малую часть своего времени, когда ты проскочишь начальный уровень.
Базы данных - это как языки программирования. Выучил одну - остальные изучить будет легче. У меня в библиотеке есть отличная книга по этому поводу, ты ее найдешь. Тут смысл будет в том, что бы разобраться с понятием бызы данных, каких видов они бывают(реляционные(sql базы), и нереляционные(noSql базы)). Разница, плюсы и минусы, и так далее.
+ само собой нужно будет подтянуть самый фундаментальный момент, это язык SQL(он не сложный), и пописать запросы в каком-нибудь mysql. Создать базу как через командную строку, так и через GUI. Разобраться со всякими там join'ами и так далее. На это у тебя уйдет максимум дней 10 чтобы втянуться, и месяцы, чтобы замастерить.

Далее, AIDL.
Одна из важнейших составляющих android'.
Я бы рекомендовал тебе ознакомиться с ней прям на сайте гугла.
- https://developer.android.com/guide/components/aidl

Android NDK
Это тот самый тул-сет, который позволит тебе писать нативный андроид и допиливать то, чего не хватает на языках типа С++. Я считаю, что это одна из самых важных частей связанных с программированием Андроида, потому что ты начинаешь понимать его internals(внутренности). Это как знаешь, разобраться с JVM, когда пишешь на java, чтобы понимать, почему у тебя крашается IDE в самый не подходящий момент.
По ndk у меня есть отличная статья:
-http://www.ntu.edu.sg/home/ehchua/programming/android/android_ndk.html

Сети и интернет.
Тут тебе стоит ознакомиться только с базой, потому что вся специфика к тебе придет тогда, когда тебе это будет нужно. Тут как с математикой, знаешь.
По сетям у меня есть отличная книга, найдешь ее в библиотеке, а топики, на которых тебе стоит акцентировать свое внимание, следующие:
- tcp/ip stack
- tcp vs udp
- ip
- https/http
- ssh
- dns
- proxy
- vpn
- routing
- port forwarding
Это все занимает процентов 30-40 той книги. Как только наткнешься на эти понятия, не пытайся халявить и резать углы. Изучай все полномерно.

На этом этапе, ты будешь знать о фундаментальных концепциях Андроида, или о том, что форсят учить на всяких курсах, а именно:
- activity lifecycle
- serveice, intent serveices, background services
- content providers
- brodcast receivers
- tasks
- back stack
- activity launch mode
- сам процесс дебагинга андроида
- view и layouts
- fragments
- и все остальное.
Написал это все в оригинале, потому то у этого нет вменяемых переводов, и звучит это все в переводах неестественно.

В этот момент тебе уже вряд ли будет нужна какая-то помощь в виде любого рода планов или курсов, потому что ты будешь примерно понимать, что тебе делать дальше и в рюкзаке будешь иметь корректные вопросы, ответы на которые ты будешь знать где искать.

iOS
Во первых, тебе нужен mac;3
Любой macbook не самых старых годов, или хакинтош, если позволяет железо. На сколько я помню, на хабре где-то есть статья, что apple не против того, чтобы ставили хакинтош на железки для single user usage. Но не для компаний, где люди зарабатывают деньги, пользуясь OS X.

Далее, мы перепрыгиваем на языки программирования. О ряде фундаментальных языков, о подходах к инженерии, теории и так далее, ты узнаешь когда будешь изучать CS, а на этом этапе мы уже явно выбирает свои инструменты.
- Swift
- Objective-C
У тебя вряд ли получится просто взять и выучить чисто Swift, хотя такое тоже возможно. Дело в том, что в мире мобильных Apple уже тонны написанного кода на objective-C, который кому-то нужно поддерживать, поэтому при найме(в зависимости от конторы конечно-же), у тебя будут спрашивать про знания objective-C, как вариант.
Само собой по этого языку есть книги, но он крайне противный, и я бы рекомендовал тебе, если будешь разбираться с этим языком, обратить внимание на такие топики, как:
- Сама работа с памятью как там организована
- KVO, KVC
- Весь runtime. Messaging, Swizzling, TFB(Toll-free bridging), и так далее.
Разумеется по мимо основных конструкций языка, вроде переменных, ветвлений и тд.

Если же говорить о Swift, то тут ситуация уже более радужная.
Возможно тебе повезет, и ты найдешь проект, где нет мерзкого objective-c, и ты сразу будешь писать на Swift'е, и поддерживать ты так же будешь Swift.
Но, ко всему этому тоже нужно быть готовым, поэтому к изучению чисто спецификации swift(с учетом того, что на этот момент ты будешь обладать достаточным спектром знаний, чтобы его хавать), нужно будет отнестись максимально серьезно.
В "Как", я тебе подробнее скажу как именно делать все то, о чем я сказал выше, плюс все то, что пойдет ниже, не забывай.

После самих языков(спецификаций), ты переходишь на еще один уровень абстракции, а именно фреймворки.
В твоем случае это будет фреймворК, единственно число.
Cocoa Touch.
Cocoa и cocoa touch - это по факту одно и тоже, и абстрагируются они от одного и того же.
Самая основная разница в том, что Cocoa для разработки под OS X, а Cocoa touch для iOS.
Ты вряд ли сможешь позволить себе такую роскошь, и программировать все нативно, на Swift. Ты будешь вынужден использовать фреймворк, потому что тебя форсит индустрия. Т.е. тут тоже самое, как и с С++ в гейм-деве.
Он много кому не нравится именно с engine team programmers, но они не могу с этим ничего поделать. Они не могут позволить себе писать на Си и Асме, потому что это долго и неэффективно, не смотря на то, что ты контролируешь все и вся.
Тут +- тоже самое. Ты будешь пользоваться готовыми модулями чаще, чем ты думаешь, но опять же, обо всем ты узнаешь в порядке очереди.

Далее, на этом этапе мы начинаем активно практиковаться.
Ты уже будешь иметь представление об:
- общем comp scie
- об iOS концептуально
- о языка программирования этой операционки
- о вспомогательных тулзах, для программирования iOS
-- Сocoa touch
-- сам дебагер
-- профайлер(там куча всего, что можно профайлить через тот же cocoa. Оч удобно)
-- keychain
-- BDD, TDD, unit tests(тестирование в общем)
и так далее.

Тебе нужно будет написать с десяток апликух, самых элементарных, чтобы почувствовать весь life cycle создание приложений на cocoa touch.
Проекты вроде:
- тетрис
- touch ID кастомный
- центр уведомлений
и так далее.
Вот пару ссылок, где ты можешь найти идеи.

https://www.makeuseof.com/tag/want-make-iphone-apps-6-projects-beginners/
https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/
https://www.raywenderlich.com/

Важный момент.
Когда ты будешь писать свои первые апликухи, тебе нужно будет засовывать их на github.
ну и само собой, перед этим разобраться с самой системой git. У меня для этого есть ролик, которого будет достаточно, чтобы пользоваться им первое время.
Почему это важный момент?
Потому что ты в итоге будешь искать работу мобильным разработчиком, скорее всего, и работодатель будет смотреть на твой профиль на github. Важно сделать так, что у тебя там была куча активности. Даже не особо важно, что ты будешь именно засовывать в свои репозитории, важна сама активность и история пушей. Поэтому - да, это важный момент.


Далее, ты начинаешь почитывать более серьезную литературу и заниматься топиками, по улучшению качества твоего кода, и внедрять эти знания в свои pet проекты.
Можешь начать с книги Pragmatic programmer. Обычно я советую Макконела, Совершенный код, но Pragramtic programmer будет отличной альтернативной под твою ситуацию.
Там ты узнаешь про архитектуру софта в принципе. Про то же самое тестирование и его важность. Про паттерны проектирования. Про принципы проектирования.
Т.е. к тому моменту пройдет уже больше полугода, и твоя задача будет в том, чтобы не просто писать код, а писать его правильно.
Чтобы его можно было поддерживать, разделять, расширять, оптимизировать и так далее.
Этими навыками обладают далеко не все, ты уж мне поверь, поэтому удели внимание данным топикам, как придет время.

Касаемо же твоей работы.
Скорее всего, если ты не придумаешь какую-то грандиозную идею апликухи, или не найдешь брешь в Cocoa touch или NDK, или какие-то уязвимости в iOS и тому подобное, что сделает тебя миллионером, ты будешь пытаться искать работу.
Зная хотя бы на 80% все то, о чем я тебе тут сказал, ты будешь проходить 1 собеседование из двух без проблем.
Да, на некоторых собеседах будет сложно, потому то где-то требуют глубокого понимания алгоритмики, где-то просят написать реддит за 2 часа, где-то заставляют моделировать воду ascii символами в консоли. Смысл в том, что у тебя всегда будет ментальный голод до знаний, потому что знать все - просто невозможно.
Наша задача будет заключаться в том, чтобы выйти на уровень минимально полноценной боевой единицы, или junior mobile developer'а.


Подводя итог:
- Мы пробегаемся по мини базе в CS(платформы, оски, алгоритмика, абстрактые типы данных, вычислительная сложность, языки программирования и тд. Обо всем этом ты узнаешь из первых двух)
- мы смотрим на android и ios поближе
- мы разбираемся со спецификациями(objective-c, swift, java, kotlin)
- с инструментами(Cocoa touch, android SDK)
- под инструментами. Дебагер, профайлер, тестирование, git и тд
- качаем software engineering' skills(паттерны проектирования, принципы проектирования, сети, дизайн, архитектура и тд)


Тут именно я и остановлюсь, но не ты.
На этой стадии ты будешь понимать чего ты хочешь, куда тебе копать, какие твои минусы и плюсы, и так далее. Я не могу планировать твою жизнь как разработчика дальше, потому что у тебя будет слишком много путей развития, и ты должен будешь выбрать их сам, главное не останавливайся развиваться.
Постоянно читать различные блоги топ девелоперов. Качать навыки из чистого cs, следить за различного рода дизайнерскими решениями, как UX, так и архитектурного плана, и тому подобное.
Не думай о том, что если ты выучишь все, что я сказал тебе тут, это будет твоя конечная. Ни в коем случае.
Изучив все это, ты лишь войдешь в сферу, а куда тебя это приведет в итоге, это уже совершенно, другая,